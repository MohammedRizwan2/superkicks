<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Order Details | SuperKicks Admin</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
  <style>
    @media print {
      .no-print { display: none !important; }
      body { background: white !important; }
    }
    .status-select {
      border: 1px solid #d1d5db;
      background: white;
      padding: 0.25rem 0.5rem;
      border-radius: 0.375rem;
      font-size: 0.75rem;
    }
    .status-select:focus {
      outline: none;
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
    }
    .status-select:disabled {
      background-color: #f3f4f6;
      color: #6b7280;
      cursor: not-allowed;
    }
    .return-action-btn {
      padding: 0.5rem 1rem;
      font-size: 0.75rem;
      font-weight: 500;
      border-radius: 0.375rem;
      cursor: pointer;
      transition: all 0.2s;
    }
    .return-action-btn:hover {
      transform: translateY(-1px);
    }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <aside class="w-64 bg-[#15172B] text-white flex flex-col justify-between no-print">
      <div>
        <h1 class="text-center text-2xl font-bold py-6">SUPERKICKS</h1>
        <ul class="space-y-2 px-4">
          <li>
            <a href="/admin/dashboard" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-tachometer-alt mr-2"></i> Dashboard
            </a>
          </li>
          <li>
            <a href="/admin/customers" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-users mr-2"></i> Customers
            </a>
          </li>
          <li>
            <a href="/admin/products" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-box mr-2"></i> Products
            </a>
          </li>
          <li>
            <a href="/admin/orders" class="flex items-center p-2 bg-blue-600 rounded font-semibold">
              <i class="fas fa-shopping-cart mr-2"></i> Orders
            </a>
          </li>
         
          <li>
            <a href="/admin/coupons" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-tags mr-2"></i> Coupon Management
            </a>
          </li>
          <li>
            <a href="/admin/sales-report" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-chart-line mr-2"></i> Sales Report
            </a>
          </li>
          <li>
            <a href="/admin/category" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-layer-group mr-2"></i> Category
            </a>
          </li>
        </ul>
      </div>
      <div class="px-4 py-4 space-y-2">
        <a href="/admin/settings" class="flex items-center p-2 hover:bg-blue-600 rounded">
          <i class="fas fa-cog mr-2"></i> Settings
        </a>
        <a href="/admin/logout" class="flex items-center p-2 hover:bg-red-600 rounded">
          <i class="fas fa-sign-out-alt mr-2"></i> Logout
        </a>
      </div>
    </aside>

    <!-- Main content -->
    <main class="flex-1 px-6 py-8">
      <!-- Loading Overlay -->
      <div id="loading-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 shadow-xl">
          <div class="flex items-center gap-3">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span>Processing...</span>
          </div>
        </div>
      </div>

      <!-- Topbar -->
      <div class="flex justify-between items-center bg-white p-4 rounded shadow mb-8 no-print">
        <div>
          <nav class="text-sm text-gray-600 mb-2">
            <a href="/admin/orders" class="hover:text-blue-600">Orders</a>
            <span class="mx-2">›</span>
            <span class="text-gray-900 font-semibold">Order #<%= order.referenceNo %></span>
          </nav>
          <h2 class="text-2xl font-bold text-gray-900">Order Details</h2>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="window.print()" class="px-4 py-2 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition">
            <i class="fas fa-print mr-1"></i> Print
          </button>
          <span class="text-gray-700 font-semibold uppercase"><i class="fas fa-user-shield"></i> ADMIN</span>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        
        <!-- Order Information (2 columns) -->
        <div class="lg:col-span-2 space-y-6">
          
          <!-- Order Summary Card -->
          <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold mb-6">Order Summary</h3>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div class="space-y-4">
                <div class="flex justify-between">
                  <span class="text-gray-600">Order Number:</span>
                  <span class="font-mono font-semibold">#<%= order.referenceNo %></span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Order Date:</span>
                  <span class="font-medium">
                    <%= new Date(order.orderDate).toLocaleDateString('en-IN', { 
                      year: 'numeric', month: 'long', day: 'numeric',
                      hour: '2-digit', minute: '2-digit'
                    }) %>
                  </span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Payment Method:</span>
                  <span class="font-medium">
                    <%= order.paymentMethod === 'COD' ? 'Cash on Delivery' : order.paymentMethod %>
                  </span>
                </div>
              </div>
              
              <div class="space-y-4">
                <div class="flex justify-between">
                  <span class="text-gray-600">Total Amount:</span>
                  <span class="text-xl font-bold">₹<%= order.total.toLocaleString('en-IN') %></span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Items Count:</span>
                  <span class="font-medium"><%= order.items.length %> item<%= order.items.length !== 1 ? 's' : '' %></span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Transaction ID:</span>
                  <span class="font-medium font-mono text-xs"><%= order.transactionId || 'N/A' %></span>
                </div>
              </div>
            </div>
          </div>

          <!-- Customer Information -->
          <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold mb-4">Customer Information</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 class="font-medium text-gray-900 mb-2">Shipping Address</h4>
                <div class="text-sm text-gray-700">
                  <p class="font-semibold"><%= order.address.name %></p>
                  <p><%= order.address.address %></p>
                  <% if (order.address.landmark) { %>
                    <p>Near <%= order.address.landmark %></p>
                  <% } %>
                  <p><%= order.address.state %>, <%= order.address.country %> - <%= order.address.pinCode %></p>
                  <p><i class="fas fa-phone text-xs mr-1"></i> <%= order.address.phone %></p>
                  <p><i class="fas fa-envelope text-xs mr-1"></i> <%= order.address.email %></p>
                </div>
              </div>
              <div>
                <h4 class="font-medium text-gray-900 mb-2">Address Type</h4>
                <div class="text-sm text-gray-700">
                  <span class="inline-flex px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                    <%= order.address.type %>
                  </span>
                  <% if (order.address.alternatePhone) { %>
                    <p class="mt-2"><i class="fas fa-phone-alt text-xs mr-1"></i> Alternate: <%= order.address.alternatePhone %></p>
                  <% } %>
                </div>
              </div>
            </div>
          </div>

          <!-- Order Items with Individual Status Management -->
          <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-semibold mb-4">Order Items Management</h3>
            
            <div class="space-y-4">
              <% order.items.forEach((item, index) => { %>
                <div class="flex flex-col gap-4 p-4 border border-gray-200 rounded-lg <%= item.isCancelled ? 'bg-gray-50 opacity-75' : '' %>" 
                     data-item-id="<%= item.id %>">
                  
                  <div class="flex flex-col sm:flex-row gap-4">
                    <!-- Product Image -->
                    <div class="flex-shrink-0">
                      <img src="<%= item.image|| '/images/placeholder.png' %>" 
                           alt="<%= item.productName %>" 
                           class="w-20 h-20 object-cover rounded border border-gray-200 <%= item.isCancelled ? 'grayscale' : '' %>"
                           onerror="this.src='/images/placeholder.png'">
                    </div>

                    <!-- Product Details -->
                    <div class="flex-1 min-w-0">
                      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
                        <div class="flex-1">
                          <h4 class="font-semibold text-gray-900">
                            <%= item.productName %>
                            <% if (item.isCancelled) { %>
                              <span class="text-xs text-red-600 ml-2">(CANCELLED)</span>
                            <% } %>
                            <% if (item.isReturned) { %>
                              <span class="text-xs text-orange-600 ml-2">(RETURNED)</span>

                            <% } %>
                            <% if (item.returnApproved==false) { %>
                              <span class="text-xs text-orange-600 ml-2">(return rejected)</span>
                            <% } %>
                          </h4>
                          <p class="text-sm text-gray-600">
                            Size: <%= item.size || 'N/A' %> 
                           
                          </p>
                          
                          <!-- Current Item Status Display -->
                          <div class="flex items-center gap-2 mt-2">
                             <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full"data-item-status="<%= item.status %>" data-item-id="<%= item._id %>"id="status-badge-<%= item._id %>"><%= item.status %>
  </span>

                            <% if (item.returnRequested) { %>
                              <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full bg-orange-100 text-orange-800">
                                RETURN REQUESTED 
                              </span>
                            <% } %>
                             <% if (item.returnApproved==false) { %>
                              <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full bg-orange-100 text-orange-800">
                                REJECTECD
                              </span>
                            <% } %>
                          </div>

                          <!-- Cancellation/Return Reason -->
                          <% if (item.cancellationReason) { %>
                            <div class="mt-2 p-2 bg-red-50 border border-red-200 rounded text-xs">
                              <span class="font-medium text-red-800">Cancellation reason:</span>
                              <span class="text-red-700"><%= item.cancellationReason %></span>
                            </div>
                          <% } %>
                          <% if (item.returnApproved==false) { %>
                            <div class="mt-2 p-2 bg-red-50 border border-red-200 rounded text-xs">
                              <span class="font-medium text-red-800">Rejection reason:</span>
                              <span class="text-red-700"><%= item.returnRejectionReason %></span>
                            </div>
                          <% } %>

                          <% if (item.returnReason) { %>
                            <div class="mt-2 p-2 bg-orange-50 border border-orange-200 rounded text-xs">
                              <span class="font-medium text-orange-800">Return reason:</span>
                              <span class="text-orange-700"><%= item.returnReason %></span>
                              <% if (item.returnRequestDate) { %>
                                <p class="text-xs text-orange-600 mt-1">
                                  Requested: <%= new Date(item.returnRequestDate).toLocaleString('en-IN') %>
                                </p>
                              <% } %>
                             
                            </div>
                          <% } %>
                        </div>
                        
                        <!-- Pricing -->
                        <div class="text-right">
                          <div class="text-sm text-gray-600">
                            ₹<%= item.price.toLocaleString('en-IN') %> × <%= item.quantity %>
                          </div>
                          <div class="text-lg font-bold">
                            ₹<%= (item.price * item.quantity).toLocaleString('en-IN') %>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Item Status Management -->
                  <div class="border-t border-gray-200 pt-3 no-print">
                    
                    <!-- Status Dropdown -->
                    <div class="flex items-center justify-between mb-3">
                      <div class="flex items-center gap-3">
                        <label class="text-sm font-medium text-gray-700">Item Status:</label>
                        <select class="item-status-select status-select"
                                data-item-id="<%= item.id %>"
                                data-current-status="<%= item.status %>"
                                <%= item.isCancelled || (item.status === 'Delivered' && !item.returnRequested) || item.isReturned ? 'disabled' : '' %>>
                          <option value="Pending" <%= item.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                          <option value="Confirmed" <%= item.status === 'Confirmed' ? 'selected' : '' %>>Confirmed</option>
                          <option value="Processing" <%= item.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                          <option value="Shipped" <%= item.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                          <option value="Out for Delivery" <%= item.status === 'Out for Delivery' ? 'selected' : '' %>>Out for Delivery</option>
                          <option value="Delivered" <%= item.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                          <option value="Cancelled" <%= item.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                        </select>
                      </div>

                      <% if (item.isCancelled || (item.status === 'Delivered' && !item.returnRequested) || item.isReturned) { %>
                        <div class="text-xs text-gray-500 italic">
                          Status locked
                        </div>
                      <% } %>
                    </div>
                    
                    <!-- Return Request Actions - CORRECTED CONDITION -->
                    <% if (item.returnRequested && !item.isReturned && item.returnApproved !== true) { %>
                      <div class="bg-amber-50 border border-amber-200 rounded-lg p-4">
                        <div class="flex items-start justify-between">
                          <div class="flex-1">
                            <div class="flex items-center gap-2 mb-2">
                              <i class="fas fa-undo text-amber-600"></i>
                              <span class="font-medium text-amber-800">Return Request Pending Admin Approval</span>
                            </div>
                            
                            <% if (item.returnReason) { %>
                              <p class="text-amber-700 text-sm mb-3">
                                <strong>Customer Reason:</strong> <%= item.returnReason %>
                              </p>
                            <% } %>
                            
                            <% if (item.returnRequestDate) { %>
                              <p class="text-amber-600 text-xs mb-3">
                                <i class="fas fa-clock mr-1"></i>
                                Requested on: <%= new Date(item.returnRequestDate).toLocaleDateString('en-IN', {
                                  year: 'numeric', month: 'short', day: 'numeric', 
                                  hour: '2-digit', minute: '2-digit'
                                }) %>
                              </p>
                            <% } %>
                          </div>
                          
                          <!-- Return Action Buttons -->
                          <div class="flex flex-col gap-2 ml-4">
                            <button onclick="handleReturnRequest('<%= item.id || item._id %>', 'approve')"
                                    class="return-action-btn bg-green-600 text-white hover:bg-green-700 border-0">
                              <i class="fas fa-check mr-1"></i> Approve Return
                            </button>
                            <button onclick="handleReturnRequest('<%= item.id || item._id %>', 'reject')"
                                    class="return-action-btn bg-red-600 text-white hover:bg-red-700 border-0">
                              <i class="fas fa-times mr-1"></i> Reject Return
                            </button>
                          </div>
                        </div>
                      </div>
                    <% } %>

                    <!-- Show Return Status if Already Processed -->
                    <% if (item.returnRequested && (item.returnApproved === true || item.returnApproved === false)) { %>
                      <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                        <div class="flex items-center gap-2 mb-2">
                          <i class="fas fa-info-circle text-gray-600"></i>
                          <span class="font-medium text-gray-800">Return Request Status</span>
                        </div>
                        
                        <% if (item.returnApproved == true) { %>
                          <p class="text-green-700 text-sm">
                            <i class="fas fa-check-circle mr-1"></i>
                            <strong>Return Approved</strong> - Item marked for return processing
                          </p>
                        <% } else if (item.returnApproved === false) { %>
                          <p class="text-red-700 text-sm">
                            <i class="fas fa-times-circle mr-1"></i>
                            <strong>Return Rejected</strong>
                            <% if (item.returnRejectionReason) { %>
                              - <%= item.returnRejectionReason %>
                            <% } %>
                          </p>
                        <% } %>
                        
                        <% if (item.returnProcessedDate) { %>
                          <p class="text-gray-600 text-xs mt-1">
                            Processed on: <%= new Date(item.returnProcessedDate).toLocaleDateString('en-IN') %>
                          </p>
                        <% } %>
                      </div>
                    <% } %>

                    <!-- Status History -->
                    <% if (item.statusHistory && item.statusHistory.length > 0) { %>
                      <div class="mt-3 text-xs">
                        <button type="button" 
                                onclick="toggleStatusHistory('<%= item.id || item._id %>')"
                                class="text-blue-600 hover:text-blue-800 font-medium">
                          <i class="fas fa-history mr-1"></i> View Status History
                        </button>
                        <div id="status-history-<%= item.id || item._id %>" class="hidden mt-2 bg-gray-50 rounded p-2 space-y-1">
                          <% item.statusHistory.forEach((history, idx) => { %>
                            <div class="flex justify-between items-center text-xs">
                              <span class="font-medium"><%= history.status %></span>
                              <span class="text-gray-500">
                                <%= new Date(history.updatedAt).toLocaleDateString('en-IN', { 
                                  month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' 
                                }) %>
                              </span>
                            </div>
                            <% if (history.reason) { %>
                              <p class="text-gray-600 text-xs ml-2">Reason: <%= history.reason %></p>
                            <% } %>
                          <% }) %>
                        </div>
                      </div>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            </div>
          </div>
        </div>

        <!-- Order Summary Sidebar -->
        <div class="lg:col-span-1">
          <div class="sticky top-6 space-y-6">
            
            <!-- Payment Summary -->
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-lg font-semibold mb-4">Payment Summary</h3>
              
              <div class="space-y-3 text-sm">
                <div class="flex justify-between">
                  <span class="text-gray-600">Items Subtotal</span>
                  <span class="font-medium">₹<%= totals.subtotal.toLocaleString('en-IN') %></span>
                </div>
                
                <div class="flex justify-between">
                  <span class="text-gray-600">Shipping</span>
                  <span class="font-medium">
                    <% if (totals.deliveryCharge === 0) { %>
                      <span class="text-green-600">FREE</span>
                    <% } else { %>
                      ₹<%= totals.deliveryCharge.toLocaleString('en-IN') %>
                    <% } %>
                  </span>
                </div>
                
                <div class="flex justify-between">
                  <span class="text-gray-600">Tax (18%)</span>
                  <span class="font-medium">₹<%= totals.tax.toLocaleString('en-IN') %></span>
                </div>
                
                <div class="border-t border-gray-200 pt-3">
                  <div class="flex justify-between text-base font-semibold">
                    <span>Total Paid</span>
                    <span class="text-lg">₹<%= order.total.toLocaleString('en-IN') %></span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Quick Stats -->
            <div class="bg-white rounded-lg shadow p-6">
              <h3 class="text-lg font-semibold mb-4">Order Stats</h3>
              
              <div class="space-y-3 text-sm">
                <% 
                const statusCounts = {};
                order.items.forEach(item => {
                  statusCounts[item.status] = (statusCounts[item.status] || 0) + 1;
                });
                %>
                
                <% Object.entries(statusCounts).forEach(([status, count]) => { %>
                  <div class="flex justify-between items-center">
                    <span class="text-gray-600"><%= status %>:</span>
                    <span class="font-medium"><%= count %> item<%= count !== 1 ? 's' : '' %></span>
                  </div>
                <% }) %>

                <% const returnRequestCount = order.items.filter(item => item.returnRequested && item.returnApproved !== true && item.returnApproved !== false).length; %>
                <% if (returnRequestCount > 0) { %>
                  <div class="flex justify-between items-center border-t pt-2 mt-2">
                    <span class="text-amber-600 font-medium">Pending Returns:</span>
                    <span class="font-semibold text-amber-600"><%= returnRequestCount %></span>
                  </div>
                <% } %>
              </div>
            </div>

            <!-- Navigation Actions -->
            <div class="bg-white rounded-lg shadow p-6 no-print">
              <h3 class="text-lg font-semibold mb-4">Actions</h3>
              
              <div class="space-y-3">
                <a href="/admin/orders" 
                   class="block w-full py-2 px-4 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition text-center text-sm font-medium">
                  <i class="fas fa-arrow-left mr-1"></i> Back to Orders
                </a>
                
                <button onclick="downloadInvoice('<%= order._id %>')"
                        class="w-full py-2 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition text-sm font-medium">
                  <i class="fas fa-download mr-1"></i> Download Invoice
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Return Rejection Reason Modal -->
  <div id="return-reject-modal" class="hidden fixed inset-0 z-50 overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4 bg-black bg-opacity-50">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Reject Return Request</h3>
          <p class="text-gray-600 mb-4">Please provide a reason for rejecting this return request:</p>
          
          <textarea id="reject-reason" 
                    placeholder="Enter rejection reason..."
                    rows="4"
                    class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500 resize-none"></textarea>
          
          <div class="flex gap-3 mt-4">
            <button id="cancel-reject"
                    class="flex-1 py-2 px-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition">
              Cancel
            </button>
            <button id="confirm-reject"
                    class="flex-1 py-2 px-4 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
              Confirm Rejection
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- JavaScript -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize status styling
      styleStatusElements();
      
      // Bind item status changes
      document.querySelectorAll('.item-status-select').forEach(select => {
        select.addEventListener('change', handleItemStatusChange);
      });

      // Return rejection modal elements
      const returnRejectModal = document.getElementById('return-reject-modal');
      const cancelRejectBtn = document.getElementById('cancel-reject');
      const confirmRejectBtn = document.getElementById('confirm-reject');
      const rejectReasonTextarea = document.getElementById('reject-reason');
      
      let currentItemIdForReject = null;

      // Modal event listeners
      cancelRejectBtn.addEventListener('click', () => {
        returnRejectModal.classList.add('hidden');
        rejectReasonTextarea.value = '';
        currentItemIdForReject = null;
      });

      confirmRejectBtn.addEventListener('click', async () => {
        const reason = rejectReasonTextarea.value.trim();
        if (!reason) {
          showToast('error', 'Please provide a reason for rejection');
          return;
        }
        
        await processReturnRejection(currentItemIdForReject, reason);
        returnRejectModal.classList.add('hidden');
        rejectReasonTextarea.value = '';
        currentItemIdForReject = null;
      });

    
      window.handleReturnRequest = async function(itemId, action) {
        if (action === 'approve') {
          await processReturnApproval(itemId);
        } else if (action === 'reject') {
          currentItemIdForReject = itemId;
          returnRejectModal.classList.remove('hidden');
        }
      };

      window.toggleStatusHistory = function(itemId) {
        const historyDiv = document.getElementById(`status-history-${itemId}`);
        historyDiv.classList.toggle('hidden');
      };

      // Process return approval
      async function processReturnApproval(itemId) {
        try {
          showLoading();

          const response = await fetch(`/admin/api/orders/items/${itemId}/return/approve`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include'
          });

          const result = await response.json();

          if (result.success) {
            showToast('success', 'Return request approved successfully');
            setTimeout(() => window.location.reload(), 1500);
          } else {
            throw new Error(result.error || 'Failed to approve return request');
          }
        } catch (error) {
          console.error('Return approval error:', error);
          showToast('error', error.message);
        } finally {
          hideLoading();
        }
      }

      
      async function processReturnRejection(itemId, reason) {
        try {
          showLoading();

          const response = await fetch(`/admin/api/orders/items/${itemId}/return/reject`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ reason })
          });

          const result = await response.json();

          if (result.success) {
            showToast('success', 'Return request rejected successfully');
            setTimeout(() => window.location.reload(), 1500);
          } else {
            throw new Error(result.error || 'Failed to reject return request');
          }
        } catch (error) {
          console.error('Return rejection error:', error);
          showToast('error', error.message);
        } finally {
          hideLoading();
        }
      }

      // Status styling functions
      function styleStatusElements() {
        // Style item status badges
        document.querySelectorAll('[data-item-status]').forEach(badge => {
          const status = badge.dataset.itemStatus;
          styleStatusBadge(badge, status);
        });

        // Style item status selects
        document.querySelectorAll('.item-status-select').forEach(select => {
          const status = select.dataset.currentStatus;
          styleStatusSelect(select, status);
        });
      }

      function styleStatusBadge(element, status) {
        const statusClasses = getStatusClass(status);
        element.className = element.className.replace(/bg-\w+-100|text-\w+-800/g, '');
        element.classList.add('inline-flex', 'px-2', 'py-1', 'text-xs', 'font-medium', 'rounded-full');
        element.classList.add(...statusClasses.split(' '));
      }

      function styleStatusSelect(element, status) {
        const statusClasses = getStatusClass(status);
        element.className = element.className.replace(/bg-\w+-100|text-\w+-800/g, '');
        element.classList.add('status-select', 'font-semibold');
        element.classList.add(...statusClasses.split(' '));
      }

      function getStatusClass(status) {
        switch(status?.toLowerCase()) {
          case 'delivered':
          case 'returned':
            return 'bg-green-100 text-green-800';
          case 'shipped':
          case 'out for delivery':
            return 'bg-blue-100 text-blue-800';
          case 'cancelled':
            return 'bg-red-100 text-red-800';
          case 'confirmed':
          case 'processing':
            return 'bg-purple-100 text-purple-800';
          case 'pending':
            return 'bg-yellow-100 text-yellow-800';
          default:
            return 'bg-gray-100 text-gray-800';
        }
      }

      // Item status change handler
      async function handleItemStatusChange(e) {
        const itemId = e.target.dataset.itemId;
        const newStatus = e.target.value;
        const originalStatus = e.target.dataset.currentStatus;

        if (newStatus === originalStatus) return;

        try {
          showLoading();

          const response = await fetch(`/admin/api/orders/items/${itemId}/status`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ status: newStatus })
          });

          const result = await response.json();

          if (result.success) {
            // Update UI
            e.target.dataset.currentStatus = newStatus;
            
            // Update item status badge
           const itemContainer = e.target.closest('[data-item-id]');
      const statusBadge = itemContainer.querySelector('[data-item-status]');
            if (statusBadge) {
              statusBadge.textContent = newStatus;
              statusBadge.dataset.itemStatus = newStatus;
              styleStatusBadge(statusBadge, newStatus);
            }
            
             styleStatusSelect(e.target, newStatus);
            // Disable select if status is final
            if (['Delivered', 'Cancelled', 'Returned'].includes(newStatus)) {
              e.target.disabled = true;
            }
            
            showToast('success', result.message || 'Item status updated successfully');
            
          } else {
            e.target.value = originalStatus;
            throw new Error(result.error || 'Failed to update item status');
          }

        } catch (error) {
          console.error('Item status update error:', error);
          showToast('error', error.message);
          e.target.value = originalStatus;
        } finally {
          hideLoading();
        }
      }

      // Utility functions
      function showLoading() {
        document.getElementById('loading-overlay').classList.remove('hidden');
      }

      function hideLoading() {
        document.getElementById('loading-overlay').classList.add('hidden');
      }

      function showToast(type, message) {
        const toast = document.createElement('div');
        toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full opacity-0`;
        
        if (type === 'success') {
          toast.classList.add('bg-green-100', 'text-green-800', 'border', 'border-green-200');
        } else {
          toast.classList.add('bg-red-100', 'text-red-800', 'border', 'border-red-200');
        }
        
        toast.innerHTML = `
          <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
          <span>${message}</span>
        `;

        document.body.appendChild(toast);

        setTimeout(() => {
          toast.classList.remove('translate-x-full', 'opacity-0');
          toast.classList.add('translate-x-0', 'opacity-100');
        }, 100);
        
        setTimeout(() => {
          toast.classList.add('translate-x-full', 'opacity-0');
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }
    });

    // Download Invoice Function
    async function downloadInvoice(orderId) {
      try {
        document.getElementById('loading-overlay').classList.remove('hidden');
        
        const response = await fetch(`/admin/orders/${orderId}/invoice`, {
          method: 'GET',
          headers: { 'Accept': 'application/pdf' },
          credentials: 'include'
        });

        if (!response.ok) {
          throw new Error(`Failed to download invoice: ${response.statusText}`);
        }

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `invoice_${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        const toastDiv = document.createElement('div');
        toastDiv.className = 'fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg bg-green-100 text-green-800 border border-green-200';
        toastDiv.innerHTML = '<i class="fas fa-check-circle mr-2"></i>Invoice downloaded successfully!';
        document.body.appendChild(toastDiv);
        setTimeout(() => toastDiv.remove(), 3000);
        
      } catch (error) {
        console.error('Download invoice error:', error);
        const toastDiv = document.createElement('div');
        toastDiv.className = 'fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg bg-red-100 text-red-800 border border-red-200';
        toastDiv.innerHTML = '<i class="fas fa-exclamation-circle mr-2"></i>' + (error.message || 'Failed to download invoice');
        document.body.appendChild(toastDiv);
        setTimeout(() => toastDiv.remove(), 3000);
      } finally {
        document.getElementById('loading-overlay').classList.add('hidden');
      }
    }
  </script>
</body>
</html>
