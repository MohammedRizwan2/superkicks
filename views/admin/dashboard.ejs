<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Admin Dashboard | SuperKicks</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
  <style>
    .chart-container { position: relative; height: 400px; }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <!-- Hidden data container -->
  <div id="dashboard-data" 
       style="display: none;" 
       data-dashboard='<%- JSON.stringify({
         totalStats: totalStats,
         salesData: salesData,
         bestSellingProducts: bestSellingProducts,
         bestSellingCategories: bestSellingCategories,
         bestSellingBrands: bestSellingBrands,
         latestOrders: latestOrders,
         period: period,
         year: year,
         month: month,
         currentYear: currentYear,
         currentMonth: currentMonth
       }) %>'></div>

  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <aside class="w-64 bg-[#15172B] text-white flex flex-col justify-between">
      <div>
        <h1 class="text-center text-2xl font-bold py-6">SUPERKICKS</h1>
        <ul class="space-y-2 px-4">
          <li>
            <a href="/admin/dashboard" class="flex items-center p-2 bg-blue-600 rounded font-semibold">
              <i class="fas fa-tachometer-alt mr-2"></i> Dashboard
            </a>
          </li>
          <li>
            <a href="/admin/customers" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-users mr-2"></i> Customers
            </a>
          </li>
          <li>
            <a href="/admin/products" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-box mr-2"></i> Products
            </a>
          </li>
          <li>
            <a href="/admin/orders" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-shopping-cart mr-2"></i> Orders
            </a>
          </li>
          <li>
            <a href="/admin/banners" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-image mr-2"></i> Banner Management
            </a>
          </li>
          <li>
            <a href="/admin/coupons" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-tags mr-2"></i> Coupon Management
            </a>
          </li>
          <li>
            <a href="/admin/sales-report" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-chart-line mr-2"></i> Sales Report
            </a>
          </li>
          <li>
            <a href="/admin/category" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-layer-group mr-2"></i> Category
            </a>
          </li>
        </ul>
      </div>
      <div class="px-4 py-4 space-y-2">
        <a href="/admin/settings" class="flex items-center p-2 hover:bg-blue-600 rounded">
          <i class="fas fa-cog mr-2"></i> Settings
        </a>
        <a href="/admin/logout" class="flex items-center p-2 hover:bg-red-600 rounded">
          <i class="fas fa-sign-out-alt mr-2"></i> Logout
        </a>
      </div>
    </aside>

    <!-- Main content -->
    <main class="flex-1 px-6 py-8">
      <!-- Topbar -->
      <div class="flex justify-between items-center bg-white p-4 rounded shadow mb-8">
        <div>
          <h2 class="text-2xl font-bold text-gray-900">Dashboard</h2>
        </div>
        <div class="flex items-center gap-3">
          <span class="text-gray-700 font-semibold uppercase">
            <i class="fas fa-user-shield"></i> ADMIN
          </span>
        </div>
      </div>

      <!-- Filter Controls -->
      <div class="bg-white p-4 rounded shadow mb-8">
        <div class="flex flex-wrap gap-4 items-end">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Period</label>
            <select id="periodFilter" class="border border-gray-300 rounded px-3 py-2">
              <option value="daily">Daily</option>
              <option value="weekly">Weekly</option>
              <option value="monthly">Monthly</option>
              <option value="yearly">Yearly</option>
            </select>
          </div>
          
          <div id="yearFilter">
            <label class="block text-sm font-medium text-gray-700 mb-1">Year</label>
            <select id="yearSelect" class="border border-gray-300 rounded px-3 py-2">
              <!-- Will be populated by JavaScript -->
            </select>
          </div>
          
          <div id="monthFilter">
            <label class="block text-sm font-medium text-gray-700 mb-1">Month</label>
            <select id="monthSelect" class="border border-gray-300 rounded px-3 py-2">
              <!-- Will be populated by JavaScript -->
            </select>
          </div>
          
          <button onclick="applyFilters()" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            Apply Filters
          </button>
        </div>
      </div>

      <!-- Stats cards -->
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-6 mb-8" id="stats-cards">
        <!-- Will be populated by JavaScript -->
      </div>

      <!-- Charts -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Sales Chart -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold mb-4">Sales Overview</h3>
          <div class="chart-container">
            <canvas id="salesChart"></canvas>
          </div>
        </div>

        <!-- Orders Chart -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold mb-4">Orders Overview</h3>
          <div class="chart-container">
            <canvas id="ordersChart"></canvas>
          </div>
        </div>
      </div>

      <!-- Best Selling Products, Categories, Brands -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
        <!-- Best Selling Products -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold mb-4">Top Selling Products</h3>
          <div class="space-y-3" id="best-selling-products">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>

        <!-- Best Selling Categories -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold mb-4">Top Categories</h3>
          <div class="space-y-3" id="best-selling-categories">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>

        <!-- Best Selling Brands -->
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold mb-4">Top Brands</h3>
          <div class="space-y-3" id="best-selling-brands">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>
      </div>

      <!-- Ledger Generation -->
      <div class="bg-white rounded-lg shadow p-6 mb-8">
        <h3 class="text-lg font-semibold mb-4">Generate Ledger Book</h3>
        <div class="flex gap-4 items-end">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
            <input type="date" id="ledgerStartDate" class="border border-gray-300 rounded px-3 py-2">
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">End Date</label>
            <input type="date" id="ledgerEndDate" class="border border-gray-300 rounded px-3 py-2">
          </div>
          <button onclick="generateLedger()" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
            <i class="fas fa-download mr-2"></i> Generate Ledger PDF
          </button>
        </div>
      </div>

      <!-- Latest Orders Table -->
      <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-semibold mb-4">Latest Orders</h3>
        <div class="overflow-x-auto rounded">
          <table class="w-full text-sm">
            <thead class="bg-gray-50 text-gray-700">
              <tr>
                <th class="py-2 px-2 text-left">Order ID</th>
                <th class="text-left">Product</th>
                <th class="text-left">Date</th>
                <th class="text-left">Customer</th>
                <th class="text-left">Total</th>
                <th class="text-left">Status</th>
                <th class="w-20 text-left">Action</th>
              </tr>
            </thead>
            <tbody class="text-gray-700" id="latest-orders-tbody">
              <!-- Will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </div>
    </main>
  </div>

  <script>
    class DashboardManager {
      constructor() {
        this.data = this.getDataFromContainer();
        this.init();
      }

      getDataFromContainer() {
        try {
          const container = document.getElementById('dashboard-data');
          if (!container) {
            throw new Error('Dashboard data container not found');
          }
          
          return JSON.parse(container.dataset.dashboard);
        } catch (error) {
          console.error('Failed to parse dashboard data:', error);
          return {};
        }
      }

      init() {
        this.populateFilters();
        this.renderStatsCards();
        this.renderCharts();
        this.renderBestSellingData();
        this.renderLatestOrders();
        this.setDefaultLedgerDates();
      }

      populateFilters() {
        const { period, year, month, currentYear, currentMonth } = this.data;
        
        // Set period filter
        document.getElementById('periodFilter').value = period;
        
        // Populate year filter
        const yearSelect = document.getElementById('yearSelect');
        for (let y = currentYear; y >= currentYear - 5; y--) {
          const option = document.createElement('option');
          option.value = y;
          option.textContent = y;
          option.selected = y === year;
          yearSelect.appendChild(option);
        }
        
        // Populate month filter
        const months = ['January', 'February', 'March', 'April', 'May', 'June', 
                       'July', 'August', 'September', 'October', 'November', 'December'];
        const monthSelect = document.getElementById('monthSelect');
        months.forEach((monthName, index) => {
          const option = document.createElement('option');
          option.value = index + 1;
          option.textContent = monthName;
          option.selected = (index + 1) === month;
          monthSelect.appendChild(option);
        });
        
        // Show/hide month filter
        document.getElementById('monthFilter').style.display = period === 'yearly' ? 'none' : 'block';
      }

      renderStatsCards() {
        const { totalStats } = this.data;
        const container = document.getElementById('stats-cards');
        
        container.innerHTML = `
          <div class="bg-red-100 text-red-800 p-5 rounded-lg shadow">
            <p class="text-sm font-medium">Total Sales</p>
            <h2 class="text-2xl font-bold mt-2">₹${totalStats.totalSales.toLocaleString('en-IN')}</h2>
          </div>
          <div class="bg-green-100 text-green-800 p-5 rounded-lg shadow">
            <p class="text-sm font-medium">Visitors</p>
            <h2 class="text-2xl font-bold mt-2">${totalStats.totalVisitors.toLocaleString('en-IN')}</h2>
          </div>
          <div class="bg-blue-100 text-blue-800 p-5 rounded-lg shadow">
            <p class="text-sm font-medium">Total Orders</p>
            <h2 class="text-2xl font-bold mt-2">${totalStats.totalOrders.toLocaleString('en-IN')}</h2>
          </div>
          <div class="bg-orange-100 text-orange-800 p-5 rounded-lg shadow">
            <p class="text-sm font-medium">Users</p>
            <h2 class="text-2xl font-bold mt-2">${totalStats.totalUsers.toLocaleString('en-IN')}</h2>
          </div>
        `;
      }

      renderCharts() {
        const { salesData } = this.data;
        
        // Prepare chart data
        const chartLabels = salesData.map(item => {
          if (item._id.day) return `${item._id.day}/${item._id.month}`;
          if (item._id.month) return `${item._id.month}/${item._id.year}`;
          if (item._id.week) return `Week ${item._id.week}`;
          return item._id;
        });
        
        const salesAmounts = salesData.map(item => item.totalSales);
        const orderCounts = salesData.map(item => item.totalOrders);

        // Sales Chart
        const salesCtx = document.getElementById('salesChart').getContext('2d');
        new Chart(salesCtx, {
          type: 'line',
          data: {
            labels: chartLabels,
            datasets: [{
              label: 'Sales Amount',
              data: salesAmounts,
              borderColor: 'rgb(59, 130, 246)',
              backgroundColor: 'rgba(59, 130, 246, 0.1)',
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  callback: function(value) {
                    return '₹' + value.toLocaleString('en-IN');
                  }
                }
              }
            }
          }
        });

        // Orders Chart
        const ordersCtx = document.getElementById('ordersChart').getContext('2d');
        new Chart(ordersCtx, {
          type: 'bar',
          data: {
            labels: chartLabels,
            datasets: [{
              label: 'Orders Count',
              data: orderCounts,
              backgroundColor: 'rgba(34, 197, 94, 0.8)',
              borderColor: 'rgb(34, 197, 94)',
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      }

      renderBestSellingData() {
        const { bestSellingProducts, bestSellingCategories, bestSellingBrands } = this.data;
        
        // Render Best Selling Products
        const productsContainer = document.getElementById('best-selling-products');
        productsContainer.innerHTML = bestSellingProducts.map((product, index) => `
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
            <div class="flex items-center">
              <span class="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs mr-3">
                ${index + 1}
              </span>
              <div>
                <p class="font-medium text-sm">${product.productName}</p>
                <p class="text-xs text-gray-500">${product.brand}</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm font-semibold">${product.totalQuantity} sold</p>
              <p class="text-xs text-gray-500">₹${product.totalRevenue.toLocaleString('en-IN')}</p>
            </div>
          </div>
        `).join('');

        // Render Best Selling Categories
        const categoriesContainer = document.getElementById('best-selling-categories');
        categoriesContainer.innerHTML = bestSellingCategories.map((category, index) => `
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
            <div class="flex items-center">
              <span class="w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-xs mr-3">
                ${index + 1}
              </span>
              <div>
                <p class="font-medium text-sm">${category.categoryName}</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm font-semibold">${category.totalQuantity} sold</p>
              <p class="text-xs text-gray-500">₹${category.totalRevenue.toLocaleString('en-IN')}</p>
            </div>
          </div>
        `).join('');

        // Render Best Selling Brands
        const brandsContainer = document.getElementById('best-selling-brands');
        brandsContainer.innerHTML = bestSellingBrands.map((brand, index) => `
          <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
            <div class="flex items-center">
              <span class="w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-xs mr-3">
                ${index + 1}
              </span>
              <div>
                <p class="font-medium text-sm">${brand._id}</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm font-semibold">${brand.totalQuantity} sold</p>
              <p class="text-xs text-gray-500">₹${brand.totalRevenue.toLocaleString('en-IN')}</p>
            </div>
          </div>
        `).join('');
      }

      renderLatestOrders() {
        const { latestOrders } = this.data;
        const tbody = document.getElementById('latest-orders-tbody');
        
        tbody.innerHTML = latestOrders.map(order => {
          const statusClass = this.getOrderStatusClass(order.status);
          const productName = order.orderItems && order.orderItems.length > 0 
            ? order.orderItems[0].productId?.name || 'Product' 
            : 'N/A';
          const additionalItems = order.orderItems && order.orderItems.length > 1 
            ? `<span class="text-xs text-gray-500">+${order.orderItems.length - 1} more</span>` 
            : '';
          
          return `
            <tr class="border-b hover:bg-gray-50">
              <td class="py-2 px-2 text-blue-600 font-mono">#${order.referenceNo}</td>
              <td>${productName} ${additionalItems}</td>
              <td>${new Date(order.createdAt).toLocaleDateString('en-IN')}</td>
              <td>${order.userId?.name || 'Guest'}</td>
              <td>₹${order.total.toLocaleString('en-IN')}</td>
              <td>
                <span class="px-2 py-1 rounded text-xs font-semibold ${statusClass}">
                  ${order.status}
                </span>
              </td>
              <td>
                <a href="/admin/orders/${order._id}" class="text-gray-500 hover:text-blue-600 cursor-pointer mr-2">
                  <i class="fas fa-eye"></i>
                </a>
                <a href="/admin/orders/${order._id}/edit" class="text-gray-500 hover:text-blue-600 cursor-pointer">
                  <i class="fas fa-edit"></i>
                </a>
              </td>
            </tr>
          `;
        }).join('');
      }

      getOrderStatusClass(status) {
        switch (status) {
          case 'Delivered': return 'bg-green-100 text-green-800';
          case 'Processing': return 'bg-purple-100 text-purple-700';
          case 'Shipped': return 'bg-yellow-100 text-yellow-800';
          case 'Cancelled': return 'bg-red-100 text-red-800';
          default: return 'bg-gray-100 text-gray-800';
        }
      }

      setDefaultLedgerDates() {
        const today = new Date();
        const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
        
        document.getElementById('ledgerStartDate').value = firstDay.toISOString().split('T')[0];
        document.getElementById('ledgerEndDate').value = today.toISOString().split('T')[0];
      }
    }

    // Initialize dashboard
    const dashboardManager = new DashboardManager();

    // Filter functions
    function applyFilters() {
      const period = document.getElementById('periodFilter').value;
      const year = document.getElementById('yearSelect').value;
      const month = document.getElementById('monthSelect').value;
      
      const params = new URLSearchParams();
      params.set('period', period);
      params.set('year', year);
      if (period !== 'yearly') {
        params.set('month', month);
      }
      
      window.location.href = `/admin/dashboard?${params.toString()}`;
    }

    // Show/hide month filter based on period
    document.getElementById('periodFilter').addEventListener('change', function() {
      const monthFilter = document.getElementById('monthFilter');
      if (this.value === 'yearly') {
        monthFilter.style.display = 'none';
      } else {
        monthFilter.style.display = 'block';
      }
    });

    // Generate Ledger
    function generateLedger() {
      const startDate = document.getElementById('ledgerStartDate').value;
      const endDate = document.getElementById('ledgerEndDate').value;
      
      if (!startDate || !endDate) {
        alert('Please select both start and end dates');
        return;
      }
      
      window.open(`/admin/dashboard/ledger?startDate=${startDate}&endDate=${endDate}`, '_blank');
    }
  </script>
</body>
</html>
