<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Sales Report | SuperKicks Admin</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    .chart-container {
      position: relative;
      height: 300px;
      width: 100%;
    }
    @media print {
      .no-print { display: none !important; }
      body { background: white !important; }
    }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <aside class="w-64 bg-[#15172B] text-white flex flex-col justify-between">
      <div>
        <h1 class="text-center text-2xl font-bold py-6">SUPERKICKS</h1>
        <ul class="space-y-2 px-4">
          <li>
            <a href="/admin/dashboard" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-tachometer-alt mr-2"></i> Dashboard
            </a>
          </li>
          <li>
            <a href="/admin/customers" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-users mr-2"></i> Customers
            </a>
          </li>
          <li>
            <a href="/admin/products" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-box mr-2"></i> Products
            </a>
          </li>
          <li>
            <a href="/admin/orders" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-shopping-cart mr-2"></i> Orders
            </a>
          </li>
          
          <li>
            <a href="/admin/coupons" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-tags mr-2"></i> Coupon Management
            </a>
          </li>
          <li>
            <a href="/admin/sales-report" class="flex items-center p-2 bg-blue-600 rounded font-semibold">
              <i class="fas fa-chart-line mr-2"></i> Sales Report
            </a>
          </li>
          <li>
            <a href="/admin/category" class="flex items-center p-2 hover:bg-blue-600 rounded">
              <i class="fas fa-layer-group mr-2"></i> Category
            </a>
          </li>
        </ul>
      </div>
      <div class="px-4 py-4 space-y-2">
        <a href="/admin/settings" class="flex items-center p-2 hover:bg-blue-600 rounded">
          <i class="fas fa-cog mr-2"></i> Settings
        </a>
        <a href="/admin/logout" class="flex items-center p-2 hover:bg-red-600 rounded">
          <i class="fas fa-sign-out-alt mr-2"></i> Logout
        </a>
      </div>
    </aside>

    <!-- Main content -->
    <main class="flex-1 px-6 py-8">
      <!-- Loading Overlay -->
      <div id="loading-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 shadow-xl">
          <div class="flex items-center gap-3">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span>Generating Report...</span>
          </div>
        </div>
      </div>

      <!-- Topbar -->
      <div class="flex justify-between items-center bg-white p-4 rounded shadow mb-8 no-print">
        <div>
          <h2 class="text-2xl font-bold text-gray-900">Sales Report</h2>
          <p class="text-gray-600 text-sm mt-1">Generate comprehensive sales analytics and reports</p>
        </div>
        <div class="flex items-center gap-3">
          <div class="flex gap-2">
            <button id="download-pdf" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition font-medium">
              <i class="fas fa-file-pdf mr-1"></i> Download PDF
            </button>
            <button id="download-excel" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition font-medium">
              <i class="fas fa-file-excel mr-1"></i> Download Excel
            </button>
          </div>
          <span class="text-gray-700 font-semibold uppercase"><i class="fas fa-user-shield"></i> ADMIN</span>
        </div>
      </div>

      <!-- Report Type Selection -->
      <div class="bg-white rounded-lg shadow p-6 mb-8 no-print">
        <h3 class="text-lg font-semibold mb-4">Report Configuration</h3>
        <div class="grid grid-cols-1 md:grid-cols-6 gap-4">
          
          <!-- Report Type -->
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-2">Report Type</label>
            <select id="report-type" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="daily">Today</option>
              <option value="weekly">This Week</option>
              <option value="monthly">This Month</option>
              <option value="yearly">This Year</option>
              <option value="custom">Custom Date Range</option>
            </select>
          </div>

          <!-- Start Date -->
          <div id="start-date-container" class="hidden">
            <label class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
            <input type="date" 
                   id="start-date"
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>

          <!-- End Date -->
          <div id="end-date-container" class="hidden">
            <label class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
            <input type="date" 
                   id="end-date"
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
          </div>

          <!-- Action Buttons -->
          <div class="flex gap-2 items-end">
            <button id="generate-report" type="button" 
                    class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition font-medium">
              <i class="fas fa-chart-bar mr-1"></i> Generate Report
            </button>
            <button id="reset-filters" type="button"
                    class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition font-medium">
              <i class="fas fa-refresh mr-1"></i> Reset
            </button>
          </div>
        </div>

        <!-- Current Report Info -->
        <div id="report-info" class="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg hidden">
          <div class="flex items-center gap-2">
            <i class="fas fa-info-circle text-blue-600"></i>
            <span class="text-blue-800 font-medium">Current Report:</span>
            <span id="report-period" class="text-blue-700"></span>
          </div>
        </div>
      </div>

      <!-- Summary Cards -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 rounded-lg shadow">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium opacity-90">Total Orders</p>
              <h2 class="text-2xl font-bold mt-2" id="total-orders">0</h2>
            </div>
            <i class="fas fa-shopping-cart text-2xl opacity-80"></i>
          </div>
        </div>
        
        <div class="bg-gradient-to-r from-green-500 to-green-600 text-white p-6 rounded-lg shadow">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium opacity-90">Total Sales</p>
              <h2 class="text-2xl font-bold mt-2" id="total-sales">₹0</h2>
            </div>
            <i class="fas fa-rupee-sign text-2xl opacity-80"></i>
          </div>
        </div>
        
        <div class="bg-gradient-to-r from-orange-500 to-orange-600 text-white p-6 rounded-lg shadow">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium opacity-90">Total Discounts</p>
              <h2 class="text-2xl font-bold mt-2" id="total-discounts">₹0</h2>
            </div>
            <i class="fas fa-tags text-2xl opacity-80"></i>
          </div>
        </div>
        
        <div class="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-6 rounded-lg shadow">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium opacity-90">Avg Order Value</p>
              <h2 class="text-2xl font-bold mt-2" id="avg-order-value">₹0</h2>
            </div>
            <i class="fas fa-chart-line text-2xl opacity-80"></i>
          </div>
        </div>
      </div>

      <!-- Discount Breakdown Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold mb-4 text-gray-800">
            <i class="fas fa-tag text-green-600 mr-2"></i>Product Offers
          </h3>
          <div class="text-3xl font-bold text-green-600" id="product-offers">₹0</div>
          <p class="text-sm text-gray-600 mt-1">Total savings from product offers</p>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6">
          <h3 class="text-lg font-semibold mb-4 text-gray-800">
            <i class="fas fa-ticket-alt text-blue-600 mr-2"></i>Coupon Discounts
          </h3>
          <div class="text-3xl font-bold text-blue-600" id="coupon-discounts">₹0</div>
          <p class="text-sm text-gray-600 mt-1">Total savings from coupon codes</p>
        </div>
      </div>

      <!-- Sales Chart -->
      <div class="bg-white rounded-lg shadow p-6 mb-8">
        <h3 class="text-lg font-semibold mb-4">Sales Trend</h3>
        <div class="chart-container">
          <canvas id="salesChart"></canvas>
        </div>
      </div>

      <!-- Detailed Orders Table -->
      <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-semibold mb-4">Detailed Sales Report</h3>
        <div class="overflow-x-auto rounded">
          <table class="w-full text-sm">
            <thead class="bg-gray-50 text-gray-700">
              <tr>
                <th class="py-3 px-4 text-left">Order ID</th>
                <th class="py-3 px-4 text-left">Date</th>
                <th class="py-3 px-4 text-left">Customer</th>
                <th class="py-3 px-4 text-left">Status</th>
                <th class="py-3 px-4 text-left">Payment Method</th>
                <th class="py-3 px-4 text-left">Subtotal</th>
                <th class="py-3 px-4 text-left">Coupon Discount</th>
                <th class="py-3 px-4 text-left">Total</th>
                <th class="py-3 px-4 text-left">Items</th>
              </tr>
            </thead>
            <tbody id="sales-table-body" class="text-gray-700">
              <!-- Sales data will be loaded dynamically -->
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <div id="pagination-container" class="mt-6 flex items-center justify-between">
          <!-- Pagination will be rendered here -->
        </div>
      </div>
    </main>
  </div>

  <script>
    class AdminSalesReportManager {
      constructor() {
        this.loadingOverlay = document.getElementById('loading-overlay');
        this.salesChart = null;
        this.currentFilters = {
          reportType: 'daily',
          startDate: '',
          endDate: '',
          page: 1,
          limit: 15       };
        this.init();
      }

      init() {
        this.bindEvents();
        this.setDefaultDates();
        this.setupDateValidation();
        this.generateReport();
      }

      // ✅ NEW: Date Validation Function
      validateDateRange(startDate, endDate) {
        // Check if both dates are provided
        if (!startDate || !endDate) {
          return { valid: false, message: 'Both start and end dates are required.' };
        }

        // Convert strings to Date objects
        const start = new Date(startDate);
        const end = new Date(endDate);
        const today = new Date();
        today.setHours(23, 59, 59, 999); // End of today

        // Check for invalid dates
        if (isNaN(start.getTime()) || isNaN(end.getTime())) {
          return { valid: false, message: 'Invalid date format. Please use YYYY-MM-DD format.' };
        }

        // Validate that end date is not before start date
        if (end < start) {
          return { valid: false, message: 'End date cannot be before start date.' };
        }

        // Check if start date is too far in the future
        if (start > today) {
          return { valid: false, message: 'Start date cannot be in the future.' };
        }

        // Check if end date is too far in the future
        if (end > today) {
          return { valid: false, message: 'End date cannot be in the future.' };
        }

        // Check maximum date range (e.g., 1 year)
        const maxRangeDays = 365;
        const daysDifference = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
        
        if (daysDifference > maxRangeDays) {
          return { valid: false, message: `Date range cannot exceed ${maxRangeDays} days.` };
        }

        return { valid: true };
      }

      
      setupDateValidation() {
        const startDateInput = document.getElementById('start-date');
        const endDateInput = document.getElementById('end-date');

        const validateAndStyle = () => {
          const startDate = startDateInput.value;
          const endDate = endDateInput.value;

          if (startDate && endDate) {
            const validation = this.validateDateRange(startDate, endDate);
            
            if (!validation.valid) {
              endDateInput.setCustomValidity(validation.message);
              endDateInput.style.borderColor = '#ef4444';
              startDateInput.style.borderColor = '#ef4444';
              
              // Show error tooltip
              this.showValidationError(validation.message);
            } else {
              endDateInput.setCustomValidity('');
              endDateInput.style.borderColor = '#d1d5db';
              startDateInput.style.borderColor = '#d1d5db';
              
              // Hide error tooltip
              this.hideValidationError();
            }
          } else {
            // Reset styling if either date is empty
            endDateInput.setCustomValidity('');
            endDateInput.style.borderColor = '#d1d5db';
            startDateInput.style.borderColor = '#d1d5db';
          }
        };

        startDateInput?.addEventListener('change', validateAndStyle);
        endDateInput?.addEventListener('change', validateAndStyle);
      }

      // ✅ NEW: Show/Hide Validation Error
      showValidationError(message) {
        this.hideValidationError(); // Remove existing error first
        
        const errorDiv = document.createElement('div');
        errorDiv.id = 'date-validation-error';
        errorDiv.className = 'mt-2 p-2 bg-red-100 border border-red-300 text-red-700 text-sm rounded';
        errorDiv.innerHTML = `<i class="fas fa-exclamation-circle mr-1"></i>${message}`;
        
        const endDateContainer = document.getElementById('end-date-container');
        endDateContainer.appendChild(errorDiv);
      }

      hideValidationError() {
        const existingError = document.getElementById('date-validation-error');
        if (existingError) {
          existingError.remove();
        }
      }

      bindEvents() {
        // Report type change
        document.getElementById('report-type').addEventListener('change', (e) => {
          this.currentFilters.reportType = e.target.value;
          this.toggleDateInputs(e.target.value === 'custom');
          this.setDefaultDates();
          
          // Auto-generate report for non-custom types
          if (e.target.value !== 'custom') {
            this.generateReport();
          }
        });

        // Date inputs
        document.getElementById('start-date').addEventListener('change', (e) => {
          this.currentFilters.startDate = e.target.value;
        });

        document.getElementById('end-date').addEventListener('change', (e) => {
          this.currentFilters.endDate = e.target.value;
        });

        // Generate report button
        document.getElementById('generate-report').addEventListener('click', () => {
          this.generateReport();
        });

        // Reset filters button
        document.getElementById('reset-filters').addEventListener('click', () => {
          this.resetFilters();
        });

        // Download buttons
        document.getElementById('download-pdf').addEventListener('click', () => {
          this.downloadReport('pdf');
        });

        document.getElementById('download-excel').addEventListener('click', () => {
          this.downloadReport('excel');
        });
      }

      toggleDateInputs(show) {
        const startContainer = document.getElementById('start-date-container');
        const endContainer = document.getElementById('end-date-container');
        
        if (show) {
          startContainer.classList.remove('hidden');
          endContainer.classList.remove('hidden');
        } else {
          startContainer.classList.add('hidden');
          endContainer.classList.add('hidden');
          this.hideValidationError();
        }
      }

      setDefaultDates() {
        const today = new Date();
        const reportType = this.currentFilters.reportType;
        
        let startDate, endDate;
        
        switch (reportType) {
          case 'daily':
            startDate = endDate = today.toISOString().split('T')[0];
            break;
          case 'weekly':
            const weekStart = new Date(today);
            weekStart.setDate(today.getDate() - today.getDay());
            startDate = weekStart.toISOString().split('T')[0];
            endDate = today.toISOString().split('T')[0];
            break;
          case 'monthly':
            startDate = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];
            endDate = today.toISOString().split('T')[0];
            break;
          case 'yearly':
            startDate = new Date(today.getFullYear(), 0, 1).toISOString().split('T')[0];
            endDate = today.toISOString().split('T')[0];
            break;
          case 'custom':
            startDate = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];
            endDate = today.toISOString().split('T')[0];
            break;
        }
        
        this.currentFilters.startDate = startDate;
        this.currentFilters.endDate = endDate;
        
        document.getElementById('start-date').value = startDate;
        document.getElementById('end-date').value = endDate;
        
        // Set max attribute to today's date
        document.getElementById('start-date').setAttribute('max', today.toISOString().split('T')[0]);
        document.getElementById('end-date').setAttribute('max', today.toISOString().split('T')[0]);
      }

      // ✅ ENHANCED: Generate Report with Validation
      async generateReport() {
        try {
          // Validate dates before generating report
          const validation = this.validateDateRange(
            this.currentFilters.startDate, 
            this.currentFilters.endDate
          );

          if (!validation.valid) {
            this.showToast('error', validation.message);
            return;
          }

          this.showLoading();

          const params = new URLSearchParams(this.currentFilters);
          const response = await fetch(`/admin/api/sales-report?${params}`, {
            credentials: 'include'
          });

          const result = await response.json();

          if (result.success) {
            this.renderSummaryCards(result.data.summary);
            this.renderSalesChart(result.data);
            this.renderSalesTable(result.data.orders);
            this.renderPagination(result.data.pagination);
            this.showReportInfo(result.data);
          } else {
            this.showToast('error', result.error || 'Failed to generate sales report');
          }

        } catch (error) {
          console.error('Generate report error:', error);
          this.showToast('error', 'Failed to generate sales report. Please try again.');
        } finally {
          this.hideLoading();
        }
      }

      renderSummaryCards(summary) {
        document.getElementById('total-orders').textContent = summary.totalOrders.toLocaleString('en-IN');
        document.getElementById('total-sales').textContent = `₹${summary.totalSalesAmount.toLocaleString('en-IN')}`;
        document.getElementById('total-discounts').textContent = `₹${summary.totalDiscounts.toLocaleString('en-IN')}`;
        document.getElementById('avg-order-value').textContent = `₹${summary.averageOrderValue.toLocaleString('en-IN')}`;
        document.getElementById('product-offers').textContent= `₹${summary.totalProductOffers.toLocaleString('en-IN')}`;
        document.getElementById('coupon-discounts').textContent = `₹${summary.totalCouponDiscounts.toLocaleString('en-IN')}`;
      }

      // ✅ ENHANCED: Chart Rendering with Better Data Processing
      renderSalesChart(data) {
        const ctx = document.getElementById('salesChart').getContext('2d');
        
        if (this.salesChart) {
          this.salesChart.destroy();
        }

        // Generate chart data based on orders
        const chartData = this.generateChartData(data.orders, data.reportType || this.currentFilters.reportType);

        this.salesChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: chartData.labels,
            datasets: [{
              label: 'Sales Amount (₹)',
              data: chartData.data,
              borderColor: 'rgb(59, 130, 246)',
              backgroundColor: 'rgba(59, 130, 246, 0.1)',
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              pointBackgroundColor: 'rgb(59, 130, 246)',
              pointBorderColor: '#ffffff',
              pointBorderWidth: 2,
              pointRadius: 5,
              pointHoverRadius: 8
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: true,
                position: 'top',
                labels: {
                  font: {
                    size: 14,
                    weight: 'bold'
                  }
                }
              },
              tooltip: {
                mode: 'index',
                intersect: false,
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: '#ffffff',
                bodyColor: '#ffffff',
                borderColor: 'rgb(59, 130, 246)',
                borderWidth: 1
              }
            },
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: 'Time Period',
                  font: {
                    size: 14,
                    weight: 'bold'
                  }
                },
                grid: {
                  display: false
                }
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: 'Sales Amount (₹)',
                  font: {
                    size: 14,
                    weight: 'bold'
                  }
                },
                beginAtZero: true,
                ticks: {
                  callback: function(value) {
                    return '₹' + value.toLocaleString('en-IN');
                  }
                },
                grid: {
                  color: 'rgba(0, 0, 0, 0.1)'
                }
              }
            },
            interaction: {
              intersect: false,
              mode: 'index'
            },
            animation: {
              duration: 1000,
              easing: 'easeInOutQuart'
            }
          }
        });
      }

      // ✅ ENHANCED: Better Chart Data Generation
      generateChartData(orders, reportType) {
        const groupedData = {};
        
        orders.forEach(order => {
          const date = new Date(order.orderDate);
          let key;
          
          switch (reportType) {
            case 'daily':
              key = `${String(date.getHours()).padStart(2, '0')}:00`;
              break;
            case 'weekly':
              const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
              key = weekdays[date.getDay()];
              break;
            case 'monthly':
              key = date.getDate().toString();
              break;
            case 'yearly':
              const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                             'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
              key = months[date.getMonth()];
              break;
            default:
              key = date.toLocaleDateString('en-IN', { day: 'numeric', month: 'short' });
          }
          
          if (!groupedData[key]) {
            groupedData[key] = 0;
          }
          groupedData[key] += order.total;
        });

        // Sort keys for proper chronological order
        const sortedKeys = Object.keys(groupedData).sort((a, b) => {
          if (reportType === 'daily') {
            return parseInt(a) - parseInt(b);
          }
          return 0; // Keep original order for other types
        });

        return {
          labels: sortedKeys,
          data: sortedKeys.map(key => groupedData[key])
        };
      }

      // ... (rest of your existing methods remain the same)

      renderSalesTable(orders) {
        const tbody = document.getElementById('sales-table-body');
        
        if (orders.length === 0) {
          tbody.innerHTML = `
            <tr>
              <td colspan="10" class="py-8 px-4 text-center text-gray-500">
                <i class="fas fa-chart-bar text-4xl mb-2 opacity-50"></i>
                <p>No sales data found for the selected period</p>
              </td>
            </tr>
          `;
          return;
        }

        tbody.innerHTML = orders.map(order => `
          <tr class="border-b hover:bg-gray-50">
            <td class="py-3 px-4 text-blue-600 font-mono">#${order.referenceNo}</td>
            <td class="py-3 px-4">
              ${new Date(order.orderDate).toLocaleDateString('en-IN', { 
                day: 'numeric', 
                month: 'short', 
                year: 'numeric' 
              })}
            </td>
            <td class="py-3 px-4">
              <div class="font-medium">${order.customerName || 'N/A'}</div>
            </td>
            <td class="py-3 px-4">
              <span class="px-2 py-1 text-xs font-semibold rounded-full ${this.getStatusClass(order.status)}">
                ${order.status}
              </span>
            </td>
            <td class="py-3 px-4">${order.paymentMethod}</td>
            <td class="py-3 px-4 font-medium">₹${order.subtotal.toLocaleString('en-IN')}</td>
            <td class="py-3 px-4 text-blue-600">-₹${order.couponDiscount.toLocaleString('en-IN')}</td>
            <td class="py-3 px-4 font-bold">₹${order.total.toLocaleString('en-IN')}</td>
            <td class="py-3 px-4">${order.itemCount}</td>
          </tr>
        `).join('');
      }

      getStatusClass(status) {
        switch(status?.toLowerCase()) {
          case 'delivered':
            return 'bg-green-100 text-green-800';
          case 'shipped':
          case 'out for delivery':
            return 'bg-blue-100 text-blue-800';
          case 'cancelled':
            return 'bg-red-100 text-red-800';
          case 'confirmed':
          case 'processing':
            return 'bg-purple-100 text-purple-800';
          case 'pending':
            return 'bg-yellow-100 text-yellow-800';
          default:
            return 'bg-gray-100 text-gray-800';
        }
      }

      renderPagination(pagination) {
        const container = document.getElementById('pagination-container');
        
        if (pagination.totalPages <= 1) {
          container.innerHTML = '<div class="text-sm text-gray-500">Showing all orders</div>';
          return;
        }

        let paginationHTML = `
          <div class="text-sm text-gray-500">
            Showing ${pagination.currentPage * pagination.limit - pagination.limit + 1}-${Math.min(pagination.currentPage * pagination.limit, pagination.totalOrders)} of ${pagination.totalOrders} orders
          </div>
          
          <div class="flex gap-2">
        `;

        if (pagination.hasPrev) {
          paginationHTML += `
            <button onclick="adminSalesReportManager.changePage(${pagination.currentPage - 1})"
                    class="px-3 py-1 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition">
              Previous
            </button>
          `;
        }

        for (let i = Math.max(1, pagination.currentPage - 2); i <= Math.min(pagination.totalPages, pagination.currentPage + 2); i++) {
          paginationHTML += `
            <button onclick="adminSalesReportManager.changePage(${i})"
                    class="px-3 py-1 ${i === pagination.currentPage ? 'bg-blue-600 text-white' : 'border border-gray-300 text-gray-700 hover:bg-gray-50'} rounded transition">
              ${i}
            </button>
          `;
        }

        if (pagination.hasNext) {
          paginationHTML += `
            <button onclick="adminSalesReportManager.changePage(${pagination.currentPage + 1})"
                    class="px-3 py-1 border border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition">
              Next
            </button>
          `;
        }

        paginationHTML += '</div>';
        container.innerHTML = paginationHTML;
      }

      showReportInfo(data) {
        const reportInfo = document.getElementById('report-info');
        const reportPeriod = document.getElementById('report-period');
        
        const start = new Date(data.dateRange.start).toLocaleDateString('en-IN');
        const end = new Date(data.dateRange.end).toLocaleDateString('en-IN');
        
        reportPeriod.textContent = `${data.reportType.charAt(0).toUpperCase() + data.reportType.slice(1)} Report (${start} - ${end})`;
        reportInfo.classList.remove('hidden');
      }

      changePage(page) {
        this.currentFilters.page = page;
        this.generateReport();
      }

      resetFilters() {
        this.currentFilters = {
          reportType: 'daily',
          startDate: '',
          endDate: '',
          page: 1,
          limit: 50
        };

        document.getElementById('report-type').value = 'daily';
        this.toggleDateInputs(false);
        this.setDefaultDates();
        this.generateReport();
      }

      async downloadReport(format) {
        try {
          // Validate dates before download
          const validation = this.validateDateRange(
            this.currentFilters.startDate, 
            this.currentFilters.endDate
          );

          if (!validation.valid) {
            this.showToast('error', validation.message);
            return;
          }

          this.showLoading();

          const params = new URLSearchParams({
            reportType: this.currentFilters.reportType,
            startDate: this.currentFilters.startDate,
            endDate: this.currentFilters.endDate
          });

          const endpoint = format === 'pdf' ? 'download-pdf' : 'download-excel';
          const response = await fetch(`/admin/api/sales-report/${endpoint}?${params}`, {
            credentials: 'include'
          });

          if (!response.ok) {
            throw new Error(`Failed to download ${format.toUpperCase()} report`);
          }

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.style.display = 'none';
          a.href = url;
          a.download = `sales-report-${Date.now()}.${format === 'pdf' ? 'pdf' : 'xlsx'}`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);

          this.showToast('success', `${format.toUpperCase()} report downloaded successfully!`);

        } catch (error) {
          console.error('Download error:', error);
          this.showToast('error', `Failed to download ${format.toUpperCase()} report`);
        } finally {
          this.hideLoading();
        }
      }

      showLoading() {
        this.loadingOverlay.classList.remove('hidden');
      }

      hideLoading() {
        this.loadingOverlay.classList.add('hidden');
      }

      showToast(type, message) {
        const toast = document.createElement('div');
        toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full opacity-0`;
        
        if (type === 'success') {
          toast.classList.add('bg-green-100', 'text-green-800', 'border', 'border-green-200');
        } else {
          toast.classList.add('bg-red-100', 'text-red-800', 'border', 'border-red-200');
        }
        
        toast.innerHTML = `
          <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
          <span>${message}</span>
        `;

        document.body.appendChild(toast);

        setTimeout(() => {
          toast.classList.remove('translate-x-full', 'opacity-0');
          toast.classList.add('translate-x-0', 'opacity-100');
        }, 100);
        
        setTimeout(() => {
          toast.classList.add('translate-x-full', 'opacity-0');
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }
    }

    // Initialize admin sales report manager
    const adminSalesReportManager = new AdminSalesReportManager();
</script>
