<!DOCTYPE html>
<html lang="en" class="scroll-smooth antialiased">
<head>
  <meta charset="UTF-8">
  <title>Superkicks â€“ Home</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"/>
  
  <!-- Your existing styles -->
  <style>
     .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            opacity: 0;
            transform: translateY(-20px);
            transition: opacity 0.3s, transform 0.3s;
            display: flex;
            align-items: center;
        }
        
        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }
        
        .toast.success {
            background-color: #10B981;
        }
        
        .toast.error {
            background-color: #EF4444;
        }

    .img-magnifier-glass {
      position: absolute;
      border: 2px solid #000;
      border-radius: 50%;
      cursor: none;
      width: 120px;
      height: 120px;
      opacity: 0.9;
      background: none;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
      display: none;
      z-index: 30;
    }
    .img-zoom { transition: transform 0.25s; }
    .thumb-active { border: 2px solid #000 !important; }

    .address-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        .modal-open {
            overflow: hidden;
        }
        .error-field {
            border-color: #ef4444 !important;
        }

        /* Smooth animations for count updates */
        .count-badge {
            transition: all 0.3s ease;
        }
        .count-badge.updated {
            animation: bounce 0.6s ease;
        }
        
        @keyframes bounce {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.2); }
        }
  </style>
</head>

<!-- Data attributes to pass EJS data to JavaScript -->
<body class="bg-white text-gray-900 font-sans tracking-wide" 
      data-logged-in="<%= typeof isLoggedIn !== 'undefined' ? isLoggedIn : false %>"
      data-just-logged-in="<%= typeof justLoggedIn !== 'undefined' ? justLoggedIn : false %>"
      data-cart-count="<%= typeof cartCount !== 'undefined' ? cartCount : 0 %>"
      data-wish-count="<%= typeof wishCount !== 'undefined' ? wishCount : 0 %>"
      data-user-avatar="<%= typeof avatar !== 'undefined' ? avatar : '/img/default-avatar.jpg' %>"
      data-user-name="<%= typeof user !== 'undefined' && user ? (user.fullName || user.name || 'User') : 'User' %>">
  
  <header class="sticky top-0 z-50 bg-black/95 backdrop-blur supports-[backdrop-filter]:bg-black/90">
    <nav class="mx-auto max-w-7xl flex items-center justify-between px-6 py-4">
      <!-- Logo -->
      <a href="/" class="text-2xl font-extrabold tracking-[0.15em] text-white hover:text-gray-300 transition">
        SUPERKICKS
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center gap-8">
        <!-- Navigation Links -->
        <ul class="flex items-center gap-6 text-sm uppercase font-medium">
          <li><a href="/" class="text-white hover:text-gray-300 transition">Home</a></li>
          <li><a href="/user/product/list" class="text-white hover:text-gray-300 transition">Shop</a></li>
          <li><a href="/user/categories" class="text-white hover:text-gray-300 transition">Categories</a></li>
        </ul>

        <div class="flex items-center gap-4">
  <div id="authSection" class="flex items-center gap-3"> 
    <% if (typeof isLoggedIn !== 'undefined' && !isLoggedIn) { %>
      <div class="flex items-center gap-3">
        <a href="/user/login" class="px-4 py-2 rounded border border-white text-white hover:bg-white hover:text-black transition">
          Login
        </a>
        <a href="/user/signup" class="px-4 py-2 rounded bg-white text-black hover:bg-transparent hover:text-white border border-white transition">
          Sign Up
        </a>
      </div>
    <% } else { %>
      
      <a href="/user/cart" class="relative text-white hover:text-gray-300 transition p-2 flex items-center">
        <i class="fas fa-shopping-bag text-xl"></i>
        <span id="cartCount" class="absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center count-badge">
          <%= typeof cartCount !== 'undefined' ? cartCount : 0 %>
        </span>
      </a>

      <a href="/user/wishlist" class="relative text-white hover:text-gray-300 transition p-2 flex items-center">
        <i class="far fa-heart text-xl"></i>
        <span id="wishCount" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center count-badge">
          <%= typeof wishCount !== 'undefined' ? wishCount : 0 %>
        </span>
      </a>

      <div class="relative">
        <button id="profileBtn" class="flex items-center gap-2 text-white hover:text-gray-300 transition px-2 py-1"> <div class="w-8 h-8 rounded-full bg-gray-600 overflow-hidden">
            <img id="userAvatar" src="<%= typeof avatar !== 'undefined' ? avatar : '/img/default-avatar.jpg' %>" alt="Profile" class="w-full h-full object-cover">
          </div>
          <span id="userName" class="hidden lg:inline text-sm">
            <%= typeof user !== 'undefined' && user ? (user.fullName || user.name || 'User') : 'User' %>
          </span>
          <i class="fas fa-chevron-down text-xs"></i>
        </button>

                      <!-- Dropdown Menu -->
              <div id="profileDropdown" class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl border opacity-0 invisible transition-all duration-200">
                <div class="py-2">
                  <a href="/user/profile" class="flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                    <i class="fas fa-user w-4"></i>
                    <span>My Profile</span>
                  </a>
                  <a href="/user/orders" class="flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                    <i class="fas fa-shopping-bag w-4"></i>
                    <span>My Orders</span>
                  </a>
                  <div class="border-t border-gray-100 mt-2 pt-2">
                    <a href="/user/logout" class="flex items-center gap-3 px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                      <i class="fas fa-sign-out-alt w-4"></i>
                      <span>Logout</span>
                    </a>
                  </div>
                </div>
              </div>

    <% } %>
  </div>
</div>
      <!-- Mobile menu button -->
      <button id="mobileBtn" class="md:hidden text-white text-2xl">
        <i class="fas fa-bars"></i>
      </button>
    </nav>
  </header>

  <script>
    // Header Dynamic Update System - Using Data Attributes
    class HeaderUpdater {
        constructor() {
            // Read initial data from data attributes
            this.body = document.body;
            this.isLoggedIn = this.body.dataset.loggedIn === 'true';
            this.justLoggedIn = this.body.dataset.justLoggedIn === 'true';
            this.updateInterval = null;
            this.init();
        }

        // Get current data from body data attributes
        getCurrentData() {
            return {
                isLoggedIn: this.body.dataset.loggedIn === 'true',
                cartCount: parseInt(this.body.dataset.cartCount) || 0,
                wishCount: parseInt(this.body.dataset.wishCount) || 0,
                avatar: this.body.dataset.userAvatar || '/img/default-avatar.jpg',
                userName: this.body.dataset.userName || 'User'
            };
        }

        // Update body data attributes with new data
        updateDataAttributes(data) {
            this.body.dataset.loggedIn = data.isLoggedIn.toString();
            this.body.dataset.cartCount = data.cartCount.toString();
            this.body.dataset.wishCount = data.wishCount.toString();
            this.body.dataset.userAvatar = data.avatar;
            this.body.dataset.userName = data.fullName || 'User';
        }

        init() {
            if (this.isLoggedIn) {
                this.setupEventListeners();
                this.startPeriodicUpdate();
                
                // Update immediately on page load if logged in
                this.updateHeaderData();
            }
        }

        setupEventListeners() {
            // Listen for storage events (in case of multiple tabs)
            window.addEventListener('storage', (e) => {
                if (e.key === 'header_update_trigger') {
                    this.updateHeaderData();
                }
            });

            // Listen for custom events from other parts of the application
            window.addEventListener('cart_updated', () => {
                this.updateHeaderData();
            });

            window.addEventListener('wishlist_updated', () => {
                this.updateHeaderData();
            });
        }

        async updateHeaderData() {
            try {
                const response = await fetch('/user/api/header-data', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'same-origin'
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                
                if (data.isLoggedIn) {
                    // Update data attributes first
                    this.updateDataAttributes(data);
                    // Then update UI
                    this.updateUI(data);
                } else {
                    this.redirectToLogin();
                }
            } catch (error) {
                console.error('Failed to update header data:', error);
                // Optionally show a subtle error message to user
            }
        }

        updateUI(data) {
            // Get current data for comparison
            const currentData = this.getCurrentData();
            
            // Update cart count
            this.updateCount('cartCount', data.cartCount, currentData.cartCount);
            
            // Update wishlist count  
            this.updateCount('wishCount', data.wishCount, currentData.wishCount);
            
            // Update avatar
            const avatarImg = document.getElementById('userAvatar');
            if (avatarImg && data.avatar && data.avatar !== currentData.avatar) {
                avatarImg.src = data.avatar;
            }
            
            // Update user name
            const userName = document.getElementById('userName');
            if (userName && data.fullName && data.fullName !== currentData.userName) {
                userName.textContent = data.fullName;
            }
        }

        updateCount(elementId, newCount, currentCount) {
            const countElement = document.getElementById(elementId);
            if (!countElement) return;

            if (newCount > 0) {
                countElement.textContent = newCount;
                countElement.style.display = 'flex';
                
                // Add animation if count changed
                if (currentCount !== newCount) {
                    countElement.classList.add('updated');
                    setTimeout(() => countElement.classList.remove('updated'), 600);
                }
            } else {
                countElement.style.display = 'none';
            }
        }

        startPeriodicUpdate() {
            // Update every 30 seconds (adjust as needed)
            this.updateInterval = setInterval(() => {
                this.updateHeaderData();
            }, 30000);
        }

        stopPeriodicUpdate() {
            if (this.updateInterval) {
                clearInterval(this.updateInterval);
                this.updateInterval = null;
            }
        }

        redirectToLogin() {
            window.location.href = '/user/login';
        }

        // Call this method when cart/wishlist actions are performed
        triggerUpdate() {
            this.updateHeaderData();
            // Also trigger update in other tabs
            localStorage.setItem('header_update_trigger', Date.now());
        }

        // Method to manually update data attributes (useful for debugging)
        setDataAttribute(key, value) {
            this.body.dataset[key] = value.toString();
        }

        // Method to get specific data attribute
        getDataAttribute(key) {
            return this.body.dataset[key];
        }
    }

   
    document.addEventListener('DOMContentLoaded', function() {
       
        const headerUpdater = new HeaderUpdater();
       
        window.headerUpdater = headerUpdater;
    });

    
    document.addEventListener('DOMContentLoaded', function() {
        const profileBtn = document.getElementById('profileBtn');
        const profileDropdown = document.getElementById('profileDropdown');
        
        if (profileBtn && profileDropdown) {
            profileBtn.addEventListener('click', () => {
                profileDropdown.classList.toggle('opacity-0');
                profileDropdown.classList.toggle('invisible');
            });

            // Close when clicking outside
            document.addEventListener('click', (e) => {
                if (!profileBtn.contains(e.target) && !profileDropdown.contains(e.target)) {
                    profileDropdown.classList.add('opacity-0', 'invisible');
                }
            });
        }
    });

    // Clean up on page unload
    window.addEventListener('beforeunload', () => {
        if (window.headerUpdater) {
            window.headerUpdater.stopPeriodicUpdate();
        }
    });
  </script>
</body>
</html>