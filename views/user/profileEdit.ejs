<%- include('../partials/header.ejs') %>

<script src="https://cdn.tailwindcss.com"></script>
<script>
  tailwind.config = {
    theme: {
      extend: {
        colors: {
          ash: '#f8f8f8',
          graphite: '#e5e5e5'
        }
      }
    }
  }
</script>

<main class="max-w-7xl mx-auto px-4 lg:px-6 py-8 bg-white min-h-screen">
  <div class="flex flex-col lg:flex-row gap-8">
    
    <!-- Sidebar -->
    <aside class="w-full lg:w-64 shrink-0">
      <div class="bg-ash/40 rounded-xl border border-black/10 p-6 shadow-sm">
        <!-- User card -->
        <div class="bg-black text-white rounded-lg p-4 mb-6">
          <div class="flex items-center gap-3">
            <div class="w-12 h-12 rounded-full overflow-hidden bg-white border-2 border-white/20">
              <img src="<%= avatarUrl || '/images/default-avatar.png' %>" alt="Avatar" class="w-full h-full object-cover">
            </div>
            <div>
              <p class="font-semibold"><%= (user && (user.fullName || user.name)) ? (user.fullName || user.name) : 'User' %></p>
              <p class="text-white/70 text-xs">Member</p>
            </div>
          </div>
        </div>

        <!-- Nav -->
        <nav class="space-y-2">
          <a href="/user/profile" class="flex items-center gap-3 px-4 py-3 rounded-lg bg-black text-white font-medium transition">
            <i class="fas fa-user w-5"></i><span>Account Overview</span>
          </a>
          <a href="/user/orders" class="flex items-center gap-3 px-4 py-3 rounded-lg text-black/70 hover:bg-black/5 hover:text-black transition-colors">
            <i class="fas fa-bag-shopping w-5"></i><span>My Orders</span>
          </a>
          <a href="/user/addresses" class="flex items-center gap-3 px-4 py-3 rounded-lg text-black/70 hover:bg-black/5 hover:text-black transition-colors">
            <i class="fas fa-map-marker-alt w-5"></i><span>Manage Addresses</span>
          </a>
          <a href="/user/wishlist" class="flex items-center gap-3 px-4 py-3 rounded-lg text-black/70 hover:bg-black/5 hover:text-black transition-colors">
            <i class="far fa-heart w-5"></i><span>Wishlist</span>
          </a>
          <a href="/user/cart" class="flex items-center gap-3 px-4 py-3 rounded-lg text-black/70 hover:bg-black/5 hover:text-black transition-colors">
            <i class="fas fa-shopping-cart w-5"></i><span>Cart</span>
          </a>
          <a href="/user/wallet" class="flex items-center gap-3 px-4 py-3 rounded-lg text-black/70 hover:bg-black/5 hover:text-black transition-colors">
            <i class="fas fa-wallet w-5"></i><span>Wallet</span>
          </a>
          
          <a href="/user/logout" class="flex items-center gap-3 px-4 py-3 rounded-lg text-red-600 hover:bg-red-50 transition-colors">
            <i class="fas fa-right-from-bracket w-5"></i><span>Logout</span>
          </a>
        </nav>
      </div>
    </aside>

    <!-- Main Content -->
    <section class="flex-1 space-y-8">
      <!-- Header -->
      <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <div>
          <h1 class="text-2xl md:text-3xl font-bold text-black">Edit Profile</h1>
          <p class="text-black/60 mt-1">Update your personal information and account settings</p>
        </div>
        <div class="bg-ash/40 rounded-lg px-4 py-2 border border-black/10">
          <p class="text-sm text-black/60">Member since: <span class="font-medium text-black"><%= user ? new Date(user.createdAt).toLocaleDateString() : 'N/A' %></span></p>
        </div>
      </div>

      <!-- Profile Information Card -->
      <div class="bg-ash/40 rounded-xl border border-black/10 overflow-hidden shadow-sm">
        <div class="p-6 border-b border-black/10 bg-white/60">
          <div class="flex items-center gap-4">
            <div class="w-12 h-12 bg-black rounded-full flex items-center justify-center">
              <i class="fas fa-user text-white text-xl"></i>
            </div>
            <div>
              <h2 class="text-xl font-bold text-black">Personal Information</h2>
              <p class="text-black/60">Update your profile details and avatar</p>
            </div>
          </div>
        </div>

        <form id="profileForm" class="p-6">
          <div class="space-y-8">
            <!-- Avatar Section -->
            <div class="flex flex-col sm:flex-row items-center gap-6">
              <div class="avatar-upload relative">
                <div class="w-32 h-32 rounded-full overflow-hidden bg-black/5 border-4 border-black/10 shadow-lg">
                  <img id="avatarPreview" src="<%= (user && avatarUrl) ? avatarUrl : '/images/default-avatar.png' %>" 
                       alt="Profile Avatar" class="w-full h-full object-cover">
                </div>
                <div class="avatar-overlay absolute inset-0 bg-black/40 rounded-full flex items-center justify-center cursor-pointer opacity-0 hover:opacity-100 transition-opacity duration-300"
                     onclick="document.getElementById('avatarInput').click()">
                  <i class="fas fa-camera text-white text-2xl"></i>
                </div>
                <input type="file" id="avatarInput" accept="image/*" class="hidden">
              </div>
              
              <div class="text-center sm:text-left">
                <h3 class="text-lg font-semibold text-black mb-2">Profile Picture</h3>
                <p class="text-black/60 mb-4 max-w-md">Upload a photo to personalize your account. JPG, PNG or WEBP. Max 5MB.</p>
                <div class="flex flex-wrap gap-3">
                  <button type="button" id="uploadBtn" class="px-4 py-2 bg-black text-white rounded-lg hover:bg-black/90 transition font-medium">
                    <i class="fas fa-upload mr-2"></i>Upload Photo
                  </button>
                  <button type="button" id="removeBtn" class="px-4 py-2 bg-white border border-black/20 text-black rounded-lg hover:bg-black/5 transition">
                    <i class="fas fa-trash mr-2"></i>Remove
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Cropper Modal -->
            <div id="cropModal" class="fixed inset-0 z-[100] hidden items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
              <div class="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] flex flex-col overflow-hidden">
                <!-- Header -->
                <div class="border-b border-black/10 px-6 py-4">
                  <h3 class="text-xl font-bold text-black">Crop Your Profile Picture</h3>
                </div>
                <!-- Cropper Body -->
                <div class="modal-body flex-1 p-4 overflow-hidden">
                  <div class="crop-container w-full h-96">
                    <img id="cropImage" src="" alt="Crop Image" class="max-w-full max-h-full">
                  </div>
                </div>
                <!-- Footer Buttons -->
                <div class="border-t border-black/10 px-6 py-4 flex justify-end gap-3 bg-ash/30">
                  <button id="cancelCropBtn" class="px-5 py-2 text-black bg-white border border-black/20 hover:bg-black/5 rounded-lg transition">
                    Cancel
                  </button>
                  <button id="confirmCropBtn" class="px-5 py-2 bg-black text-white rounded-lg hover:bg-black/90 transition font-medium">
                    Save Profile Picture
                  </button>
                </div>
              </div>
            </div>

            <!-- Form Fields -->
            <div class="grid md:grid-cols-2 gap-6">
              <div>
                <label class="block text-sm font-semibold text-black/70 mb-2">Full Name *</label>
                <div class="relative">
                  <input type="text" id="fullName" name="fullName" required
                         value="<%= (user && user.fullName) ? user.fullName : '' %>"
                         class="w-full px-4 py-3 pl-12 bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" 
                         placeholder="Enter your full name">
                  <i class="fas fa-user absolute left-4 top-1/2 transform -translate-y-1/2 text-black/40"></i>
                </div>
                <div class="field-error text-red-600 text-sm mt-1 hidden" id="fullNameError"></div>
              </div>
              
              <!-- Updated Phone Number Field with Country Code -->
              <div>
                <label class="block text-sm font-semibold text-black/70 mb-2">Phone Number</label>
                <div class="flex gap-2">
                  <!-- Country Code Dropdown -->
                  <div class="relative min-w-[8rem]">
                    <select id="countryCode" name="countryCode" 
                            class="w-full px-3 py-3 pl-10 pr-8 bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors appearance-none">
                      <option value="+91">+91 (IN)</option>
                      <option value="+1">+1 (US)</option>
                      <option value="+44">+44 (UK)</option>
                      <option value="+61">+61 (AU)</option>
                      <option value="+65">+65 (SG)</option>
                      <option value="+60">+60 (MY)</option>
                      <option value="+971">+971 (AE)</option>
                      <option value="+86">+86 (CN)</option>
                      <option value="+81">+81 (JP)</option>
                      <option value="+82">+82 (KR)</option>
                      <option value="+33">+33 (FR)</option>
                      <option value="+49">+49 (DE)</option>
                      <option value="+39">+39 (IT)</option>
                      <option value="+34">+34 (ES)</option>
                      <option value="+55">+55 (BR)</option>
                      <option value="+52">+52 (MX)</option>
                      <option value="+7">+7 (RU)</option>
                      <option value="+27">+27 (ZA)</option>
                    </select>
                    <i class="fas fa-chevron-down absolute right-3 top-1/2 transform -translate-y-1/2 text-black/40 pointer-events-none"></i>
                    <i class="fas fa-globe absolute left-3 top-1/2 transform -translate-y-1/2 text-black/40"></i>
                  </div>
                  
                  <!-- Phone Number Input -->
                  <div class="relative flex-1">
                    <input type="tel" id="phoneNumber" name="phoneNumber"
                           class="w-full px-4 py-3 pl-12 bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" 
                           placeholder="1234567890">
                    <i class="fas fa-phone absolute left-4 top-1/2 transform -translate-y-1/2 text-black/40"></i>
                  </div>
                </div>
                <div class="field-error text-red-600 text-sm mt-1 hidden" id="phoneError"></div>
              </div>
              
              <div>
                <label class="block text-sm font-semibold text-black/70 mb-2">Date of Birth</label>
                <div class="relative">
                  <input type="date" id="dateOfBirth" name="dateOfBirth"
                         value="<%= (user && user.dateOfBirth) ? new Date(user.dateOfBirth).toISOString().split('T')[0] : '' %>"
                         class="w-full px-4 py-3 pl-12 bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors">
                  <i class="fas fa-calendar absolute left-4 top-1/2 transform -translate-y-1/2 text-black/40"></i>
                </div>
                <div class="field-error text-red-600 text-sm mt-1 hidden" id="dateOfBirthError"></div>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-wrap gap-4 pt-6 border-t border-black/10">
              <button type="submit" class="px-8 py-3 bg-black text-white rounded-lg hover:bg-black/90 transition font-semibold">
                <span id="saveProfileText">Save Changes</span>
                <span id="saveProfileLoading" class="hidden"><i class="fas fa-spinner fa-spin mr-2"></i>Saving...</span>
              </button>
              
              <button type="button" id="changeEmailBtn" class="px-8 py-3 bg-black text-white rounded-lg hover:bg-black/90 transition font-semibold">
                <i class="fas fa-envelope mr-2"></i>Change Email
              </button>
              
              <button type="button" id="changePasswordBtn" class="px-8 py-3 bg-black text-white rounded-lg hover:bg-black/90 transition font-semibold">
                <i class="fas fa-lock mr-2"></i>Change Password
              </button>
            </div>
          </div>
        </form>
      </div>

      <!-- Current Account Info -->
      <div class="bg-ash/40 rounded-xl border border-black/10 p-6 shadow-sm">
        <h3 class="text-lg font-semibold text-black mb-4">Current Account Information</h3>
        <div class="grid md:grid-cols-2 gap-4">
          <div class="flex items-center justify-between p-4 bg-white/60 rounded-lg border border-black/10">
            <div>
              <p class="text-sm font-medium text-black/70">Email Address</p>
              <p class="text-black font-medium"><%= (user && user.email) ? user.email : 'Not set' %></p>
            </div>
            <i class="fas fa-envelope text-black/60 text-xl"></i>
          </div>
          
          <div class="flex items-center justify-between p-4 bg-white/60 rounded-lg border border-black/10">
            <div>
              <p class="text-sm font-medium text-black/70">Phone Number</p>
              <p class="text-black font-medium"><%= (user && user.phone) ? user.phone : 'Not set' %></p>
            </div>
            <i class="fas fa-phone text-black/60 text-xl"></i>
          </div>
          
          <div class="flex items-center justify-between p-4 bg-white/60 rounded-lg border border-black/10">
            <div>
              <p class="text-sm font-medium text-black/70">Account Status</p>
              <p class="text-green-600 font-semibold">Active</p>
            </div>
            <i class="fas fa-check-circle text-green-500 text-xl"></i>
          </div>
          
          <div class="flex items-center justify-between p-4 bg-white/60 rounded-lg border border-black/10">
            <div>
              <p class="text-sm font-medium text-black/70">Last Updated</p>
              <p class="text-black font-medium"><%= user ? new Date(user.updatedAt).toLocaleDateString() : 'N/A' %></p>
            </div>
            <i class="fas fa-clock text-black/60 text-xl"></i>
          </div>
        </div>
      </div>
    </section>
  </div>
</main>

<!-- Change Email Modal -->
<div id="emailModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50 p-4">
  <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
    <!-- Modal Header -->
    <div class="p-6 border-b border-black/10">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-3">
          <div class="w-10 h-10 bg-black/10 rounded-lg flex items-center justify-center">
            <i class="fas fa-envelope text-black/60"></i>
          </div>
          <div>
            <h3 class="text-xl font-bold text-black">Change Email</h3>
            <p class="text-sm text-black/60" id="emailModalSubtitle">Enter your new email address</p>
          </div>
        </div>
        <button id="closeEmailModal" class="p-2 hover:bg-black/5 rounded-lg transition">
          <i class="fas fa-times text-black/60"></i>
        </button>
      </div>
    </div>

    <!-- Email Change Form -->
    <div id="emailChangeStep" class="p-6">
      <form id="emailChangeForm">
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-semibold text-black/70 mb-2">Current Password *</label>
            <div class="relative">
              <input type="password" id="currentPasswordEmail" name="currentPassword" required
                     class="w-full px-4 py-3 pr-12 bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" 
                     placeholder="Enter current password">
              <button type="button" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-black/60 hover:text-black" 
                      onclick="togglePasswordVisibility('currentPasswordEmail')">
                <i class="fas fa-eye" id="currentPasswordEmailIcon"></i>
              </button>
            </div>
            <div class="field-error text-red-600 text-sm mt-1 hidden" id="currentPasswordEmailError"></div>
          </div>
          <div>
            <label class="block text-sm font-semibold text-black/70 mb-2">New Email Address *</label>
            <div class="relative">
              <input type="email" id="newEmail" name="newEmail" required
                     class="w-full px-4 py-3 pl-12 bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" 
                     placeholder="Enter new email address">
              <i class="fas fa-envelope absolute left-4 top-1/2 transform -translate-y-1/2 text-black/40"></i>
            </div>
            <div class="field-error text-red-600 text-sm mt-1 hidden" id="newEmailError"></div>
          </div>
        </div>
        
        <div class="flex gap-3 mt-6">
          <button type="button" id="cancelEmailBtn" class="px-6 py-3 bg-white border border-black/20 text-black rounded-lg hover:bg-black/5 transition">
            Cancel
          </button>
          <button type="submit" class="flex-1 bg-black text-white px-6 py-3 rounded-lg hover:bg-black/90 transition font-medium">
            <span id="sendOtpText">Send OTP</span>
            <span id="sendOtpLoading" class="hidden"><i class="fas fa-spinner fa-spin mr-2"></i>Sending...</span>
          </button>
        </div>
      </form>
    </div>

    <!-- OTP Verification Step -->
    <div id="otpVerificationStep" class="p-6 hidden">
      <form id="otpVerificationForm">
        <div class="text-center mb-6">
          <div class="w-16 h-16 bg-black/10 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="fas fa-shield-alt text-black/60 text-2xl"></i>
          </div>
          <h4 class="text-lg font-semibold text-black mb-2">Verify Your Email</h4>
          <p class="text-black/60 text-sm">We've sent a verification code to</p>
          <p class="text-black font-medium" id="otpEmailDisplay"></p>
        </div>

        <div class="space-y-4">
          <div>
            <label class="block text-sm font-semibold text-black/70 mb-3">Enter 6-digit code</label>
            <div class="flex gap-2 justify-center">
              <input type="text" class="otp-input w-12 h-12 text-center text-lg font-bold bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" maxlength="1" data-index="0">
              <input type="text" class="otp-input w-12 h-12 text-center text-lg font-bold bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" maxlength="1" data-index="1">
              <input type="text" class="otp-input w-12 h-12 text-center text-lg font-bold bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" maxlength="1" data-index="2">
              <input type="text" class="otp-input w-12 h-12 text-center text-lg font-bold bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" maxlength="1" data-index="3">
              <input type="text" class="otp-input w-12 h-12 text-center text-lg font-bold bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" maxlength="1" data-index="4">
              <input type="text" class="otp-input w-12 h-12 text-center text-lg font-bold bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" maxlength="1" data-index="5">
            </div>
            <div class="field-error text-red-600 text-sm text-center mt-2 hidden" id="otpError"></div>
          </div>
          
          <div class="text-center">
            <p class="text-sm text-black/60">Didn't receive the code?</p>
            <button type="button" id="resendOtpBtn" class="text-black hover:text-black/80 font-medium text-sm">
              Resend OTP (<span id="resendTimer">60</span>s)
            </button>
          </div>
        </div>
        
        <div class="flex gap-3 mt-6">
          <button type="button" id="backToEmailBtn" class="px-6 py-3 bg-white border border-black/20 text-black rounded-lg hover:bg-black/5 transition">
            Back
          </button>
          <button type="submit" class="flex-1 bg-black text-white px-6 py-3 rounded-lg hover:bg-black/90 transition font-medium">
            <span id="verifyOtpText">Verify & Update</span>
            <span id="verifyOtpLoading" class="hidden"><i class="fas fa-spinner fa-spin mr-2"></i>Verifying...</span>
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Change Password Modal -->
<div id="passwordModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50 p-4">
  <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
    <!-- Modal Header -->
    <div class="p-6 border-b border-black/10">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-3">
          <div class="w-10 h-10 bg-black/10 rounded-lg flex items-center justify-center">
            <i class="fas fa-lock text-black/60"></i>
          </div>
          <div>
            <h3 class="text-xl font-bold text-black">Change Password</h3>
            <p class="text-sm text-black/60">Update your account password</p>
          </div>
        </div>
        <button id="closePasswordModal" class="p-2 hover:bg-black/5 rounded-lg transition">
          <i class="fas fa-times text-black/60"></i>
        </button>
      </div>
    </div>
    
    <form id="passwordChangeForm" class="p-6">
      <div class="space-y-4">
        <div>
          <label class="block text-sm font-semibold text-black/70 mb-2">Current Password *</label>
          <div class="relative">
            <input type="password" id="currentPassword" name="currentPassword" required
                   class="w-full px-4 py-3 pr-12 bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" 
                   placeholder="Enter current password">
            <button type="button" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-black/60 hover:text-black" 
                    onclick="togglePasswordVisibility('currentPassword')">
              <i class="fas fa-eye" id="currentPasswordIcon"></i>
            </button>
          </div>
          <div class="field-error text-red-600 text-sm mt-1 hidden" id="currentPasswordError"></div>
        </div>
        
        <div>
          <label class="block text-sm font-semibold text-black/70 mb-2">New Password *</label>
          <div class="relative">
            <input type="password" id="newPassword" name="newPassword" required
                   class="w-full px-4 py-3 pr-12 bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" 
                   placeholder="Enter new password">
            <button type="button" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-black/60 hover:text-black" 
                    onclick="togglePasswordVisibility('newPassword')">
              <i class="fas fa-eye" id="newPasswordIcon"></i>
            </button>
          </div>
          <div class="field-error text-red-600 text-sm mt-1 hidden" id="newPasswordError"></div>
          <div class="mt-2 text-xs text-black/60">
            <p class="flex items-center gap-1"><i class="fas fa-check-circle text-green-500"></i> Must be at least 6 characters</p>
            <p class="flex items-center gap-1"><i class="fas fa-check-circle text-green-500"></i> Include at least one number</p>
          </div>
        </div>
        
        <div>
          <label class="block text-sm font-semibold text-black/70 mb-2">Confirm New Password *</label>
          <div class="relative">
            <input type="password" id="confirmPassword" name="confirmPassword" required
                   class="w-full px-4 py-3 pr-12 bg-ash/30 border border-black/20 rounded-lg focus:border-black/50 focus:bg-white focus:outline-none transition-colors" 
                   placeholder="Confirm new password">
            <button type="button" class="absolute right-3 top-1/2 transform -translate-y-1/2 text-black/60 hover:text-black" 
                    onclick="togglePasswordVisibility('confirmPassword')">
              <i class="fas fa-eye" id="confirmPasswordIcon"></i>
            </button>
          </div>
          <div class="field-error text-red-600 text-sm mt-1 hidden" id="confirmPasswordError"></div>
        </div>
      </div>
      
      <div class="flex gap-3 mt-6">
        <button type="button" id="cancelPasswordBtn" class="px-6 py-3 bg-white border border-black/20 text-black rounded-lg hover:bg-black/5 transition">
          Cancel
        </button>
        <button type="submit" class="flex-1 bg-black text-white px-6 py-3 rounded-lg hover:bg-black/90 transition font-medium">
          <span id="changePasswordText">Change Password</span>
          <span id="changePasswordLoading" class="hidden"><i class="fas fa-spinner fa-spin mr-2"></i>Changing...</span>
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Footer -->
<footer class="bg-black text-white mt-16">
  <div class="max-w-7xl mx-auto px-6 py-10 grid sm:grid-cols-2 lg:grid-cols-4 gap-6 text-sm">
    <div class="flex items-center gap-3">
      <i class="fas fa-shipping-fast text-2xl text-white"></i>
      <div><p class="font-semibold">Express Shipping</p><p class="text-white/70">Ships in 24 hours</p></div>
    </div>
    <div class="flex items-center gap-3">
      <i class="fas fa-location-dot text-2xl text-white"></i>
      <div><p class="font-semibold">Shipping Tracking</p><p class="text-white/70">Track your orders</p></div>
    </div>
    <div class="flex items-center gap-3">
      <i class="fas fa-shield-halved text-2xl text-white"></i>
      <div><p class="font-semibold">Buy Safely</p><p class="text-white/70">Secure checkout</p></div>
    </div>
    <div class="flex items-center gap-3">
      <i class="fab fa-cc-visa text-2xl text-white/80"></i>
      <i class="fab fa-cc-mastercard text-2xl text-white/80"></i>
      <i class="fab fa-paypal text-2xl text-white/80"></i>
    </div>
  </div>
</footer>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>

<style>
/* Enhanced styles for black and white theme */
.field-error.show {
  display: block !important;
}

.otp-input.filled {
  border-color: #000 !important;
  background-color: white !important;
}

.crop-container {
  max-height: 400px;
  overflow: hidden;
}

.crop-container img {
  max-width: 100%;
  height: auto;
}

/* Toast styles */
.toast {
  position: fixed;
  top: 20px;
  right: 20px;
  background: white;
  color: #000;
  padding: 12px 16px;
  border-radius: 8px;
  border: 1px solid #e5e5e5;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  transform: translateX(100%);
  opacity: 0;
  transition: all 0.3s ease;
}

.toast.success {
  border-color: #10b981;
  color: #065f46;
}

.toast.error {
  border-color: #ef4444;
  color: #991b1b;
}

.toast.show {
  transform: translateX(0);
  opacity: 1;
}

/* Modal backdrop */
#cropModal {
  backdrop-filter: blur(4px);
}

#cropModal.show {
  display: flex !important;
}

/* Country code dropdown styling */
.country-code-select {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  background-position: right 0.5rem center;
  background-repeat: no-repeat;
  background-size: 1.5em 1.5em;
  padding-right: 2.5rem;
}
</style>

<script>
class ProfileEditor {
  constructor() {
    this.BASE_PATH = '/user/api';
    this.resendTimer = null;
    this.cropper = null;
    this.init();
  }

  init() {
    this.bindEvents();
    this.setupOtpInputs();
    this.setupPhoneInput();
    this.initCropper();
    this.setupCountryCode();
  }

  bindEvents() {
    // Profile form
    document.getElementById('profileForm').addEventListener('submit', this.handleProfileUpdate.bind(this));
    
    // Avatar handlers
    document.getElementById('uploadBtn').addEventListener('click', () => {
      document.getElementById('avatarInput').click();
    });
    document.getElementById('removeBtn').addEventListener('click', this.removeAvatar.bind(this));
    document.getElementById('avatarInput').addEventListener('change', this.handleAvatarSelect.bind(this));
    
    // Cropper buttons
    document.getElementById('confirmCropBtn').addEventListener('click', this.handleAvatarCrop.bind(this));
    document.getElementById('cancelCropBtn').addEventListener('click', this.cancelAvatarCrop.bind(this));
    
    // Email change
    document.getElementById('changeEmailBtn').addEventListener('click', this.openEmailModal.bind(this));
    document.getElementById('closeEmailModal').addEventListener('click', this.closeEmailModal.bind(this));
    document.getElementById('cancelEmailBtn').addEventListener('click', this.closeEmailModal.bind(this));
    document.getElementById('emailChangeForm').addEventListener('submit', this.handleEmailChangeRequest.bind(this));
    document.getElementById('otpVerificationForm').addEventListener('submit', this.handleOtpVerification.bind(this));
    document.getElementById('backToEmailBtn').addEventListener('click', this.backToEmailStep.bind(this));
    document.getElementById('resendOtpBtn').addEventListener('click', this.resendOtp.bind(this));
    
    // Password change
    document.getElementById('changePasswordBtn').addEventListener('click', this.openPasswordModal.bind(this));
    document.getElementById('closePasswordModal').addEventListener('click', this.closePasswordModal.bind(this));
    document.getElementById('cancelPasswordBtn').addEventListener('click', this.closePasswordModal.bind(this));
    document.getElementById('passwordChangeForm').addEventListener('submit', this.handlePasswordChange.bind(this));
    
    // ESC key handler
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        this.closeEmailModal();
        this.closePasswordModal();
        this.cancelAvatarCrop();
      }
    });
  }

  setupCountryCode() {
    // Parse existing phone number to set country code and phone number
  const currentPhone = "<%= (user && user.phone) ? user.phone : '' %>";

    if (currentPhone) {
      this.parseAndSetPhoneNumber(currentPhone);
    }
  }

  parseAndSetPhoneNumber(phone) {
    // Common country codes pattern
    const countryCodes = {
      '+91': 'IN',
      '+1': 'US',
      '+44': 'UK',
      '+61': 'AU',
      '+65': 'SG',
      '+60': 'MY',
      '+971': 'AE',
      '+86': 'CN',
      '+81': 'JP',
      '+82': 'KR',
      '+33': 'FR',
      '+49': 'DE',
      '+39': 'IT',
      '+34': 'ES',
      '+55': 'BR',
      '+52': 'MX',
      '+7': 'RU',
      '+27': 'ZA'
    };

    let countryCode = '+91'; // Default to India
    let phoneNumber = phone;

    // Try to extract country code
    for (const code of Object.keys(countryCodes)) {
      if (phone.startsWith(code)) {
        countryCode = code;
        phoneNumber = phone.substring(code.length).replace(/^[-\\s]+/, '');
        break;
      }
    }

    // Set the values in the form
    const countryCodeSelect = document.getElementById('countryCode');
    const phoneNumberInput = document.getElementById('phoneNumber');

    if (countryCodeSelect && phoneNumberInput) {
      countryCodeSelect.value = countryCode;
      phoneNumberInput.value = phoneNumber;
    }
  }

  getFullPhoneNumber() {
    const countryCode = document.getElementById('countryCode').value;
    const phoneNumber = document.getElementById('phoneNumber').value;
    
    if (!phoneNumber.trim()) {
      return '';
    }
    
    return `${countryCode}${phoneNumber}`;
  }

  initCropper() {
    this.cropModal = document.getElementById('cropModal');
    this.cropImage = document.getElementById('cropImage');
    this.avatarInput = document.getElementById('avatarInput');
    
    // Ensure modal is hidden on initialization
    if (this.cropModal) {
      this.cropModal.classList.add('hidden');
      this.cropModal.classList.remove('flex');
      
      // Close modal when clicking outside
      this.cropModal.addEventListener('click', (e) => {
        if (e.target === this.cropModal) {
          this.cancelAvatarCrop();
        }
      });
    }
  }

  handleAvatarSelect(e) {
    const file = e.target.files[0];
    if (!file) {
      this.cancelAvatarCrop();
      return;
    }
    
    if (!file.type.match('image.*')) {
      this.showToast('error', 'Please select a valid image file');
      this.avatarInput.value = '';
      return;
    }
    
    if (file.size > 5 * 1024 * 1024) {
      this.showToast('error', 'Image size must be less than 5MB');
      this.avatarInput.value = '';
      return;
    }
    
    const reader = new FileReader();
    reader.onload = (e) => {
      if (this.cropper) {
        this.cropper.destroy();
        this.cropper = null;
      }
      
      this.cropImage.src = e.target.result;
      this.cropModal.classList.remove('hidden');
      this.cropModal.classList.add('flex');
      
      setTimeout(() => {
        this.cropper = new Cropper(this.cropImage, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 0.8,
          guides: false,
          responsive: true,
          restore: false,
          checkCrossOrigin: false,
          checkOrientation: false,
          modal: true,
          guides: true,
          center: true,
          highlight: false,
          cropBoxMovable: true,
          cropBoxResizable: true,
          toggleDragModeOnDblclick: false,
        });
      }, 100);
    };
    reader.readAsDataURL(file);
  }

  async handleAvatarCrop() {
    if (!this.cropper) return;
    
    const canvas = this.cropper.getCroppedCanvas({
      width: 500,
      height: 500,
      fillColor: '#fff'
    });
    
    canvas.toBlob(async (blob) => {
      if (!blob) return;
      
      try {
        this.toggleLoading(true);
        
        const file = new File([blob], 'avatar.jpg', {
          type: 'image/jpeg',
          lastModified: Date.now()
        });
        
        const formData = new FormData();
        formData.append('avatar', file);
        
        const response = await fetch(`${this.BASE_PATH}/avatar`, {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (!response.ok || !result.success) {
          throw new Error(result?.error?.message || 'Failed to upload avatar');
        }
        
        document.getElementById('avatarPreview').src = result.data.avatarUrl;
        this.showToast('success', 'Profile picture updated successfully!');
        
        this.cancelAvatarCrop();
      } catch (error) {
        this.showToast('error', error.message);
      } finally {
        this.toggleLoading(false);
        this.avatarInput.value = '';
      }
    }, 'image/jpeg', 0.95);
  }

  cancelAvatarCrop() {
    if (this.cropModal) {
      this.cropModal.classList.add('hidden');
      this.cropModal.classList.remove('flex');
    }
    if (this.cropper) {
      this.cropper.destroy();
      this.cropper = null;
    }
    if (this.avatarInput) {
      this.avatarInput.value = '';
    }
    this.cropImage.src = '';
  }

  async removeAvatar() {
    if (!confirm('Are you sure you want to remove your profile photo?')) return;
    
    try {
      this.toggleLoading(true);
      
      const response = await fetch(`${this.BASE_PATH}/avatar`, {
        method: 'DELETE'
      });
      
      const result = await response.json();
      
      if (!response.ok || !result.success) {
        throw new Error(result?.error?.message || 'Failed to remove avatar');
      }
      
      document.getElementById('avatarPreview').src = '/images/default-avatar.png';
      this.showToast('success', 'Profile picture removed successfully!');
    } catch (error) {
      this.showToast('error', error.message);
    } finally {
      this.toggleLoading(false);
    }
  }

  setupPhoneInput() {
    const phoneNumberInput = document.getElementById('phoneNumber');
    if (!phoneNumberInput) return;

    phoneNumberInput.addEventListener('input', function(e) {
      // Remove any non-digit characters
      let input = e.target.value.replace(/\D/g, '');
      
      // Limit to 15 digits (reasonable phone number length)
      if (input.length > 15) {
        input = input.substring(0, 15);
      }
      
      e.target.value = input;
    });

    phoneNumberInput.addEventListener('keydown', function(e) {
      // Allow only numbers and control keys
      if (!/[\d]|Backspace|Delete|ArrowLeft|ArrowRight|Tab/.test(e.key)) {
        e.preventDefault();
      }
    });
  }

  async handleProfileUpdate(e) {
    e.preventDefault();
    this.clearErrors();
    this.setLoading('saveProfile', true);

    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());
    
    // Combine country code and phone number
    data.phone = this.getFullPhoneNumber();

    try {
      const response = await fetch(`${this.BASE_PATH}/profile`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        if (result?.error?.errors) {
          this.showFieldErrors(result.error.errors);
        }
        throw new Error(result?.error?.message || 'Failed to update profile');
      }

      this.showToast('success', 'Profile updated successfully!');
      setTimeout(() => this.updateSidebarInfo(data), 500);
      this.updateAccountInfo(data);

    } catch (error) {
      this.showToast('error', error.message);
    } finally {
      this.setLoading('saveProfile', false);
    }
  }

  openEmailModal() {
    document.getElementById('emailModal').classList.remove('hidden');
    document.getElementById('emailModal').classList.add('flex');
    document.body.style.overflow = 'hidden';
    this.showEmailStep();
  }

  closeEmailModal() {
    document.getElementById('emailModal').classList.add('hidden');
    document.getElementById('emailModal').classList.remove('flex');
    document.body.style.overflow = '';
    this.resetEmailModal();
  }

  showEmailStep() {
    document.getElementById('emailChangeStep').classList.remove('hidden');
    document.getElementById('otpVerificationStep').classList.add('hidden');
    document.getElementById('emailModalSubtitle').textContent = 'Enter your new email address';
  }

  showOtpStep() {
    document.getElementById('emailChangeStep').classList.add('hidden');
    document.getElementById('otpVerificationStep').classList.remove('hidden');
    document.getElementById('emailModalSubtitle').textContent = 'Verify your new email address';
  }

  backToEmailStep() {
    this.showEmailStep();
    this.clearOtpInputs();
  }

  resetEmailModal() {
    document.getElementById('emailChangeForm').reset();
    document.getElementById('otpVerificationForm').reset();
    this.clearOtpInputs();
    this.clearErrors();
    this.showEmailStep();
    if (this.resendTimer) {
      clearInterval(this.resendTimer);
      this.resendTimer = null;
    }
  }

  async handleEmailChangeRequest(e) {
    e.preventDefault();
    this.clearErrors();
    this.setLoading('sendOtp', true);

    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    try {
      const response = await fetch(`${this.BASE_PATH}/email/request-change`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        if (result?.error?.errors) {
          this.showFieldErrors(result.error.errors);
        }
        throw new Error(result?.error?.message || 'Failed to send OTP');
      }

      document.getElementById('otpEmailDisplay').textContent = data.newEmail;
      this.showOtpStep();
      this.startResendTimer();
      this.showToast('success', 'OTP sent to your new email address!');

    } catch (error) {
      this.showToast('error', error.message);
    } finally {
      this.setLoading('sendOtp', false);
    }
  }

  async handleOtpVerification(e) {
    e.preventDefault();
    this.clearErrors();
    
    const otp = this.getOtpValue();
    if (!otp || otp.length !== 6) {
      this.showFieldError('otpError', 'Please enter the complete 6-digit code');
      return;
    }

    this.setLoading('verifyOtp', true);

    const newEmail = document.getElementById('newEmail').value;

    try {
      const response = await fetch(`${this.BASE_PATH}/email/verify-change`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ newEmail, otp })
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        if (result?.error?.field === 'otp') {
          this.showFieldError('otpError', result.error.message);
        } else {
          throw new Error(result?.error?.message || 'Failed to verify OTP');
        }
        return;
      }

      this.showToast('success', 'Email updated successfully!');
      this.closeEmailModal();
      setTimeout(() => location.reload(), 1000);

    } catch (error) {
      this.showToast('error', error.message);
    } finally {
      this.setLoading('verifyOtp', false);
    }
  }

  async resendOtp() {
    const newEmail = document.getElementById('newEmail').value;
    
    try {
      const response = await fetch(`${this.BASE_PATH}/email/resend-otp`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ newEmail })
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result?.error?.message || 'Failed to resend OTP');
      }

      this.clearOtpInputs();
      this.startResendTimer();
      this.showToast('success', 'New OTP sent to your email!');

    } catch (error) {
      this.showToast('error', error.message);
    }
  }

  openPasswordModal() {
    document.getElementById('passwordModal').classList.remove('hidden');
    document.getElementById('passwordModal').classList.add('flex');
    document.body.style.overflow = 'hidden';
    setTimeout(() => document.getElementById('currentPassword').focus(), 100);
  }

  closePasswordModal() {
    document.getElementById('passwordModal').classList.add('hidden');
    document.getElementById('passwordModal').classList.remove('flex');
    document.body.style.overflow = '';
    document.getElementById('passwordChangeForm').reset();
    this.clearErrors();
  }

  async handlePasswordChange(e) {
    e.preventDefault();
    this.clearErrors();

    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries());

    if (data.newPassword !== data.confirmPassword) {
      this.showFieldError('confirmPasswordError', 'Passwords do not match');
      return;
    }

    if (data.newPassword.length < 6) {
      this.showFieldError('newPasswordError', 'Password must be at least 6 characters');
      return;
    }

    if (!/\d/.test(data.newPassword)) {
      this.showFieldError('newPasswordError', 'Password must contain at least one number');
      return;
    }

    this.setLoading('changePassword', true);

    try {
      const response = await fetch(`${this.BASE_PATH}/password`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        if (result?.error?.errors) {
          this.showFieldErrors(result.error.errors);
        }
        throw new Error(result?.error?.message || 'Failed to change password');
      }

      this.showToast('success', 'Password changed successfully!');
      this.closePasswordModal();

    } catch (error) {
      this.showToast('error', error.message);
    } finally {
      this.setLoading('changePassword', false);
    }
  }

  setupOtpInputs() {
    const inputs = document.querySelectorAll('.otp-input');
    
    inputs.forEach((input, index) => {
      input.addEventListener('input', (e) => {
        const value = e.target.value;
        
        if (value.length === 1) {
          input.classList.add('filled');
          if (index < inputs.length - 1) {
            inputs[index + 1].focus();
          }
        } else {
          input.classList.remove('filled');
        }
        
        e.target.value = value.replace(/[^0-9]/g, '');
      });
      
      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && !input.value && index > 0) {
          inputs[index - 1].focus();
          inputs[index - 1].classList.remove('filled');
        }
      });
      
      input.addEventListener('paste', (e) => {
        e.preventDefault();
        const pasteData = e.clipboardData.getData('text').replace(/[^0-9]/g, '').slice(0, 6);
        
        pasteData.split('').forEach((digit, i) => {
          if (inputs[i]) {
            inputs[i].value = digit;
            inputs[i].classList.add('filled');
          }
        });
        
        if (pasteData.length < 6 && inputs[pasteData.length]) {
          inputs[pasteData.length].focus();
        }
      });
    });
  }

  getOtpValue() {
    const inputs = document.querySelectorAll('.otp-input');
    return Array.from(inputs).map(input => input.value).join('');
  }

  clearOtpInputs() {
    document.querySelectorAll('.otp-input').forEach(input => {
      input.value = '';
      input.classList.remove('filled');
    });
  }

  startResendTimer() {
    const resendBtn = document.getElementById('resendOtpBtn');
    const timerSpan = document.getElementById('resendTimer');
    let seconds = 60;
    
    resendBtn.disabled = true;
    resendBtn.classList.add('opacity-50', 'cursor-not-allowed');
    
    this.resendTimer = setInterval(() => {
      seconds--;
      timerSpan.textContent = seconds;
      
      if (seconds <= 0) {
        clearInterval(this.resendTimer);
        resendBtn.disabled = false;
        resendBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        resendBtn.innerHTML = 'Resend OTP';
      }
    }, 1000);
  }

  showFieldErrors(errors) {
    Object.entries(errors).forEach(([field, message]) => {
      this.showFieldError(field + 'Error', message);
    });
  }

  showFieldError(errorId, message) {
    const errorEl = document.getElementById(errorId);
    if (errorEl) {
      errorEl.textContent = message;
      errorEl.classList.remove('hidden');
      errorEl.classList.add('show');
    }
  }

  clearErrors() {
    document.querySelectorAll('.field-error').forEach(el => {
      el.textContent = '';
      el.classList.add('hidden');
      el.classList.remove('show');
    });
  }

  setLoading(type, loading) {
    const textEl = document.getElementById(type + 'Text');
    const loadingEl = document.getElementById(type + 'Loading');
    
    if (textEl && loadingEl) {
      textEl.classList.toggle('hidden', loading);
      loadingEl.classList.toggle('hidden', !loading);
    }
  }

  showToast(type, message) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.innerHTML = `
      <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
      <span>${message}</span>
    `;

    document.body.appendChild(toast);

    setTimeout(() => toast.classList.add('show'), 100);
    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }

  updateSidebarInfo(data) {
    const sidebarName = document.querySelector('aside .text-white p.font-semibold');
    if (sidebarName && data.fullName) {
      sidebarName.textContent = data.fullName;
    }
  }
  
  updateAccountInfo(data) {
    if (data.fullName) {
      const accountName = document.querySelector('.bg-black p.font-semibold');
      if (accountName) accountName.textContent = data.fullName;
    }
  }

  toggleLoading(loading) {
    const confirmCropBtn = document.getElementById('confirmCropBtn');
    if (loading) {
      confirmCropBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Saving...';
      confirmCropBtn.disabled = true;
    } else {
      confirmCropBtn.innerHTML = 'Save Profile Picture';
      confirmCropBtn.disabled = false;
    }
  }
}

function togglePasswordVisibility(inputId) {
  const input = document.getElementById(inputId);
  const icon = document.getElementById(inputId + 'Icon');
  
  if (input.type === 'password') {
    input.type = 'text';
    icon.classList.remove('fa-eye');
    icon.classList.add('fa-eye-slash');
  } else {
    input.type = 'password';
    icon.classList.remove('fa-eye-slash');
    icon.classList.add('fa-eye');
  }
}

document.addEventListener('DOMContentLoaded', () => {
  new ProfileEditor();
});
</script>
</body>
</html>