<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Wishlist | SuperKicks</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
  <style>
    .product-image-hover:hover img {
      transform: scale(1.05);
      transition: transform 0.3s ease;
    }
    .remove-btn {
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    .wishlist-item:hover .remove-btn {
      opacity: 1;
    }
  </style>
</head>
<body class="bg-white text-black">
  <!-- Header -->
  <%- include('../partials/header') %>

  <!-- Loading Overlay -->
  <div id="loading-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 shadow-xl">
      <div class="flex items-center gap-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-black"></div>
        <span>Processing...</span>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    
    <!-- Page Header -->
    <div class="mb-12">
      <nav class="text-sm text-gray-600 mb-4">
        <a href="/" class="hover:text-black transition-colors">Home</a>
        <span class="mx-2">›</span>
        <span class="text-black font-medium">Wishlist</span>
      </nav>
      
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 class="text-3xl font-bold text-black">My Wishlist</h1>
          <p class="text-gray-600 mt-2">Items you've saved for later</p>
        </div>
        
        <div class="flex items-center gap-4">
          <span class="text-sm text-gray-600">
            <span id="wishlist-count">0</span> item<span id="items-plural">s</span>
          </span>
          <button id="clear-all-btn" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm font-medium hidden">
            <i class="fas fa-trash mr-2"></i>Clear All
          </button>
        </div>
      </div>
    </div>

    <!-- Wishlist Content -->
    <div id="wishlist-container">
      <!-- Empty State -->
      <div id="empty-wishlist" class="hidden text-center py-20">
        <div class="max-w-md mx-auto">
          <div class="w-24 h-24 mx-auto mb-6 bg-gray-100 rounded-full flex items-center justify-center">
            <i class="fas fa-heart text-gray-400 text-3xl"></i>
          </div>
          <h2 class="text-2xl font-bold text-black mb-4">Your wishlist is empty</h2>
          <p class="text-gray-600 mb-8">Start adding items you love to keep track of them and purchase later.</p>
          <a href="/user/products/list" class="inline-flex items-center px-6 py-3 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors font-medium">
            <i class="fas fa-shopping-bag mr-2"></i>
            Continue Shopping
          </a>
        </div>
      </div>

      <!-- Wishlist Grid -->
      <div id="wishlist-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
        <!-- Wishlist items will be loaded here -->
      </div>
    </div>

    <!-- Pagination -->
    <div id="pagination-container" class="mt-12 flex justify-center">
      <!-- Pagination will be rendered here -->
    </div>
  </main>

  <!-- Footer -->
  

  <!-- Remove Confirmation Modal -->
  <div id="remove-modal" class="hidden fixed inset-0 z-50 overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4 bg-black bg-opacity-50">
      <div class="bg-white rounded-xl shadow-2xl max-w-md w-full">
        <div class="p-6">
          <h3 class="text-lg font-semibold mb-4">Remove from Wishlist</h3>
          <p class="text-gray-600 mb-6">Are you sure you want to remove this item from your wishlist?</p>
          
          <div class="flex gap-3">
            <button id="cancel-remove" class="flex-1 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium">
              Cancel
            </button>
            <button id="confirm-remove" class="flex-1 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors font-medium">
              Remove
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Wishlist JavaScript -->
  <script>
    class WishlistManager {
      constructor() {
        this.currentPage = 1;
        this.itemsPerPage = 12;
        this.wishlistItems = [];
        this.variantToRemove = null;
        this.init();
      }

      init() {
        this.bindEvents();
        this.loadWishlist();
      }

      bindEvents() {
        // Clear all button
        document.getElementById('clear-all-btn').addEventListener('click', () => {
          this.clearAllWishlist();
        });

        // Modal controls
        document.getElementById('cancel-remove').addEventListener('click', () => {
          this.closeRemoveModal();
        });

        document.getElementById('confirm-remove').addEventListener('click', () => {
          this.confirmRemoveItem();
        });

        // Close modal on outside click
        document.getElementById('remove-modal').addEventListener('click', (e) => {
          if (e.target.id === 'remove-modal') {
            this.closeRemoveModal();
          }
        });
      }

      async loadWishlist() {
        try {
          this.showLoading();

          const response = await fetch('/user/api/wishlist', {
            credentials: 'include'
          });

          const result = await response.json();

          if (result.success) {
            this.wishlistItems = result.data.items || [];
            this.renderWishlist();
            this.updateCounter();
          } else {
            this.showToast('error', result.error || 'Failed to load wishlist');
          }

        } catch (error) {
          console.error('Load wishlist error:', error);
          this.showToast('error', 'Failed to load wishlist');
        } finally {
          this.hideLoading();
        }
      }

      renderWishlist() {
        const container = document.getElementById('wishlist-container');
        const emptyState = document.getElementById('empty-wishlist');
        const grid = document.getElementById('wishlist-grid');

        if (this.wishlistItems.length === 0) {
          emptyState.classList.remove('hidden');
          grid.classList.add('hidden');
          return;
        }

        emptyState.classList.add('hidden');
        grid.classList.remove('hidden');

        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const endIndex = startIndex + this.itemsPerPage;
        const currentItems = this.wishlistItems.slice(startIndex, endIndex);

        grid.innerHTML = currentItems.map(item => `
          <div class="wishlist-item group bg-white border border-gray-200 rounded-xl overflow-hidden hover:border-black transition-all duration-300 hover:shadow-lg relative">
            <!-- Remove Button -->
            <button class="remove-btn absolute top-3 right-3 z-10 w-8 h-8 bg-white rounded-full shadow-md flex items-center justify-center hover:bg-red-50 hover:text-red-600 transition-colors"
                    onclick="wishlistManager.showRemoveModal('${item.variantId}')">
              <i class="fas fa-times text-sm"></i>
            </button>

            <!-- Product Image -->
            <div class="product-image-hover aspect-square bg-gray-50 overflow-hidden">
              <img src="${item.images[0] || '/images/placeholder.png'}" 
                   alt="${item.productName}"
                   class="w-full h-full object-cover transition-transform duration-300"
                   onerror="this.src='/images/placeholder.png'">
            </div>

            <!-- Product Info -->
            <div class="p-4">
              <div class="mb-2">
                <p class="text-xs text-gray-500 uppercase tracking-wide">${item.brand}</p>
                <h3 class="font-semibold text-black text-sm leading-tight mt-1">
                  <a href="/products/${item.productId}" class="hover:underline">
                    ${item.productName}
                  </a>
                </h3>
              </div>

              <!-- Size Display -->
              <div class="mb-2">
                <span class="inline-flex items-center px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-md">
                  Size: ${item.size}
                </span>
              </div>

              <div class="mb-4">
                <span class="text-lg font-bold text-black">₹${item.price.toLocaleString('en-IN')}</span>
                ${item.originalPrice && item.originalPrice !== item.price ? `
                  <span class="text-sm text-gray-500 line-through ml-2">₹${item.originalPrice.toLocaleString('en-IN')}</span>
                ` : ''}
              </div>

              <!-- Action Buttons -->
              <div class="space-y-2">
                <button onclick="wishlistManager.addToCart('${item.variantId}')"
                        class="w-full py-2 px-4 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors font-medium text-sm">
                  <i class="fas fa-shopping-cart mr-2"></i>Add to Cart
                </button>
                
                <a href="/user/products/${item.productId}"
                   class="block w-full py-2 px-4 border border-gray-300 text-center text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium text-sm">
                  View Details
                </a>
              </div>

              <!-- Added Date -->
              <p class="text-xs text-gray-500 mt-3">
                Added ${new Date(item.addedAt).toLocaleDateString('en-IN', { 
                  day: 'numeric', 
                  month: 'short', 
                  year: 'numeric' 
                })}
              </p>
            </div>
          </div>
        `).join('');

        this.renderPagination();
      }

      renderPagination() {
        const container = document.getElementById('pagination-container');
        const totalPages = Math.ceil(this.wishlistItems.length / this.itemsPerPage);

        if (totalPages <= 1) {
          container.innerHTML = '';
          return;
        }

        let paginationHTML = '<div class="flex gap-2">';

        if (this.currentPage > 1) {
          paginationHTML += `
            <button onclick="wishlistManager.changePage(${this.currentPage - 1})"
                    class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
              Previous
            </button>
          `;
        }

        for (let i = Math.max(1, this.currentPage - 2); i <= Math.min(totalPages, this.currentPage + 2); i++) {
          paginationHTML += `
            <button onclick="wishlistManager.changePage(${i})"
                    class="px-4 py-2 ${i === this.currentPage ? 'bg-black text-white' : 'border border-gray-300 hover:bg-gray-50'} rounded-lg transition-colors">
              ${i}
            </button>
          `;
        }

        if (this.currentPage < totalPages) {
          paginationHTML += `
            <button onclick="wishlistManager.changePage(${this.currentPage + 1})"
                    class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
              Next
            </button>
          `;
        }

        paginationHTML += '</div>';
        container.innerHTML = paginationHTML;
      }

      updateCounter() {
        const count = this.wishlistItems.length;
        document.getElementById('wishlist-count').textContent = count;
        document.getElementById('items-plural').textContent = count === 1 ? '' : 's';
        
        const clearBtn = document.getElementById('clear-all-btn');
        if (count > 0) {
          clearBtn.classList.remove('hidden');
        } else {
          clearBtn.classList.add('hidden');
        }
      }

      changePage(page) {
        this.currentPage = page;
        this.renderWishlist();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }

      showRemoveModal(variantId) {
        this.variantToRemove = variantId;
        document.getElementById('remove-modal').classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }

      closeRemoveModal() {
        document.getElementById('remove-modal').classList.add('hidden');
        document.body.style.overflow = '';
        this.variantToRemove = null;
      }

      async confirmRemoveItem() {
        if (!this.variantToRemove) return;

        await this.removeFromWishlist(this.variantToRemove);
        this.closeRemoveModal();
      }

      async removeFromWishlist(variantId) {
        try {
          this.showLoading();

          const response = await fetch(`/user/api/wishlist/${variantId}`, {
            method: 'DELETE',
            credentials: 'include'
          });

          const result = await response.json();

          if (result.success) {
              if (window.headerUpdater) {
                     window.headerUpdater.triggerUpdate();
              }
            this.showToast('success', 'Item removed from wishlist');
            await this.loadWishlist();
          } else {
            this.showToast('error', result.error || 'Failed to remove item');
          }

        } catch (error) {
          console.error('Remove item error:', error);
          this.showToast('error', 'Failed to remove item');
        } finally {
          this.hideLoading();
        }
      }

      async clearAllWishlist() {
        if (!confirm('Are you sure you want to clear your entire wishlist?')) return;

        try {
          this.showLoading();

          const response = await fetch('/user/api/wishlist', {
            method: 'DELETE',
            credentials: 'include'
          });

          const result = await response.json();

          if (result.success) {
            this.showToast('success', 'Wishlist cleared successfully');
            this.wishlistItems = [];
            this.renderWishlist();
            this.updateCounter();
          } else {
            this.showToast('error', result.error || 'Failed to clear wishlist');
          }

        } catch (error) {
          console.error('Clear wishlist error:', error);
          this.showToast('error', 'Failed to clear wishlist');
        } finally {
          this.hideLoading();
        }
      }

      async addToCart(variantId) {
        try {
          this.showLoading();

          const response = await fetch('/user/api/cart', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({
              variantId: variantId,
              quantity: 1
            })
          });

          const result = await response.json();

          if (result.success) {
            this.showToast('success', 'Item added to cart');
            // Update cart counter if exists
            const cartCounter = document.getElementById('cart-counter');
            if (cartCounter) {
              cartCounter.textContent = result.data.totalItems || '0';
            }
            // Remove from wishlist dynamically
            await this.removeFromWishlist(variantId);
          } else {
            this.showToast('error', result.error || 'Failed to add to cart');
          }

        } catch (error) {
          console.error('Add to cart error:', error);
          this.showToast('error', 'Failed to add to cart');
        } finally {
          this.hideLoading();
        }
      }

      showLoading() {
        document.getElementById('loading-overlay').classList.remove('hidden');
      }

      hideLoading() {
        document.getElementById('loading-overlay').classList.add('hidden');
      }

      showToast(type, message) {
        const toast = document.createElement('div');
        toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full opacity-0`;
        
        if (type === 'success') {
          toast.classList.add('bg-green-100', 'text-green-800', 'border', 'border-green-200');
        } else {
          toast.classList.add('bg-red-100', 'text-red-800', 'border', 'border-red-200');
        }
        
        toast.innerHTML = `
          <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
          <span>${message}</span>
        `;

        document.body.appendChild(toast);

        setTimeout(() => {
          toast.classList.remove('translate-x-full', 'opacity-0');
          toast.classList.add('translate-x-0', 'opacity-100');
        }, 100);
        
        setTimeout(() => {
          toast.classList.add('translate-x-full', 'opacity-0');
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }
    }

    // Initialize wishlist manager
    const wishlistManager = new WishlistManager();
  </script>
</body>
</html>