<%- include('../partials/header') %>

<main class="max-w-7xl mx-auto px-6 py-12">
    <!-- Breadcrumbs -->
    <nav class="mb-8 text-sm">
        <ol class="flex items-center gap-2 text-gray-600">
            <li><a href="/" class="hover:text-gray-900 transition">Home</a></li>
            <li><i class="fa-solid fa-chevron-right text-xs"></i></li>
            <li><a href="/user/product/list" class="hover:text-gray-900 transition">Shop</a></li>
            <% if (product && product.categoryId) { %>
                <li><i class="fa-solid fa-chevron-right text-xs"></i></li>
                <li><a href="/user/categories/<%= product.categoryId._id %>" class="hover:text-gray-900 transition"><%= product.categoryId.name %></a></li>
            <% } %>
            <li><i class="fa-solid fa-chevron-right text-xs"></i></li>
            <li class="text-gray-900 font-semibold"><%= product.productName %></li>
        </ol>
    </nav>

    <!-- MAIN PRODUCT SECTION -->
    <div class="grid lg:grid-cols-2 gap-16 mb-20">
        
        <!-- IMAGE GALLERY -->
        <div class="space-y-4">
            <div class="aspect-square bg-gray-50 rounded-lg overflow-hidden relative group img-magnifier-container">
                <img
                    id="mainProductImage"
                    src="<%= product.images && product.images[0] ? getImageUrl(product.images[0]) : '/images/placeholder.jpg' %>"
                    alt="<%= product.productName %>"
                    class="w-full h-full object-contain img-zoom"
                />
            </div>
            
            <!-- Thumbnails -->
            <div class="flex gap-3 overflow-x-auto pb-2">
                <% (product.images || []).forEach((img, i) => { %>
                    <img
                        src="<%= getImageUrl(img) %>"
                        class="w-20 h-20 object-contain bg-gray-50 rounded border-2 border-transparent cursor-pointer hover:border-gray-300 transition flex-shrink-0 thumbnail-img"
                        onclick="changeMainImage(this);"
                        onmouseenter="changeMainImage(this);"
                    />
                <% }) %>
            </div>
        </div>

        <!-- PRODUCT INFO -->
        <div class="space-y-6">
            <div>
                <!-- Product Name and Wishlist Icon Row -->
                <div class="flex items-start justify-between mb-2">
                    <h1 class="text-3xl lg:text-4xl font-bold flex-1 mr-4"><%= product.productName %></h1>
                    
                    <!-- Wishlist Icon -->
                    <button id="wishlistBtn" class="wishlist-btn p-2 rounded-full hover:bg-gray-100 transition-all duration-300" title="Add to Wishlist">
                        <i id="wishlistIcon" class="fas fa-heart text-2xl text-gray-400 hover:text-red-500 transition-colors duration-300"></i>
                    </button>
                </div>
                
                <p class="text-xl text-gray-600 mb-4">by <span class="font-semibold"><%= product.brand %></span></p>
                
                <!-- Rating -->
                <div class="flex items-center gap-3 mb-6">
                    <%
                        const avgRating = reviews && reviews.length > 0 ? (reviews.reduce((a, b) => a + b.rating, 0) / reviews.length).toFixed(1) : '0.0';
                    %>
                    <div class="flex">
                        <% for (let i = 1; i <= 5; i++) { %>
                            <i class="fa-star <%= i <= Math.round(avgRating) ? 'fas text-yellow-400' : 'far text-gray-300' %> text-lg"></i>
                        <% } %>
                    </div>
                    <span class="text-sm text-gray-600">(<%= reviews.length %> reviews, <%= avgRating %> rating)</span>
                </div>
            </div>

            <!-- PRICING -->
            <div class="py-6 border-y border-gray-200">
                <div class="flex items-baseline gap-4 mb-4">
                    <%
                        // Find first available variant or first variant for initial display
                        const firstAvailable = product.variants && product.variants.find(v => v.stock > 0);
                        const displayVariant = firstAvailable || (product.variants && product.variants[0]);
                        const displayPrice = displayVariant ? (displayVariant.salePrice || displayVariant.regularPrice) : 0;
                    %>
                    <span id="currentPrice" class="text-3xl font-bold">
                        ₹<%= displayPrice ? displayPrice.toFixed(2) : '0.00' %>
                    </span>
                    <% if (displayVariant && displayVariant.salePrice && displayVariant.salePrice < displayVariant.regularPrice) { %>
                        <span id="originalPrice" class="line-through text-gray-400 text-xl">
                            ₹<%= displayVariant.regularPrice.toFixed(2) %>
                        </span>
                        <span id="discountBadge" class="bg-red-100 text-red-700 px-3 py-1 rounded-full text-sm font-semibold">
                            <%= Math.round((1 - displayVariant.salePrice/displayVariant.regularPrice)*100) %>% OFF
                        </span>
                    <% } %>
                </div>

                <!-- Stock & Coupon -->
                <div class="flex flex-wrap gap-4 text-sm">
                    <%
                        // FIXED: Check if ANY variant has stock, not just the first one
                        const hasAnyStock = product.variants && product.variants.some(v => v.stock > 0);
                        const totalStock = product.variants ? product.variants.reduce((sum, v) => sum + v.stock, 0) : 0;
                    %>
                    <span id="stockStatus" class="flex items-center gap-2 <%= hasAnyStock ? 'text-green-700' : 'text-red-600' %> font-semibold">
                        <i class="fas <%= hasAnyStock ? 'fa-check-circle' : 'fa-times-circle' %>"></i>
                        <%= hasAnyStock ? `${totalStock} units available` : 'All variants out of stock' %>
                    </span>
                    <% if (product.coupon) { %>
                        <span id="couponDisplay" class="bg-purple-100 text-purple-800 px-3 py-1 rounded-full font-semibold">
                            <i class="fa-solid fa-ticket mr-1"></i>Coupon: <%= product.coupon.code %> - <%= product.coupon.offer %>%
                        </span>
                    <% } %>
                </div>
            </div>

            <!-- VARIANT SELECTOR -->
            <% if (product.variants && product.variants.length > 0) { %>
                <div>
                    <label class="block text-sm font-semibold mb-3 uppercase tracking-wide">Select Size</label>
                    <select id="variantSelector" class="w-full p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-900 bg-white">
                        <% product.variants.forEach((variant, index) => { %>
                            <option 
                                value="<%= variant._id %>"
                                data-stock="<%= variant.stock %>"
                                data-price="<%= variant.salePrice || variant.regularPrice %>"
                                data-regular-price="<%= variant.regularPrice %>"
                                <%= variant.stock === 0 ? 'disabled' : '' %>
                                <%= (firstAvailable && variant._id === firstAvailable._id) || (!firstAvailable && index === 0) ? 'selected' : '' %>>
                                Size: <%= variant.size %> — ₹<%= (variant.salePrice || variant.regularPrice).toFixed(2) %>
                                <%= variant.stock === 0 ? ' (Out of stock)' : '' %>
                            </option>
                        <% }) %>
                    </select>
                </div>
            <% } %>

            <!-- ADD TO CART -->
            <div class="pt-4">
                <div id="errorMessage" class="bg-red-50 text-red-700 border border-red-200 rounded-lg px-4 py-3 mb-4 hidden">
                    <i class="fa-solid fa-exclamation-triangle mr-2"></i><span id="errorText"></span>
                </div>
                
                <%
                    // FIXED: Check if ANY variant has stock, not just the first one
                    const productIsAvailable = product.isListed && hasAnyStock;
                %>
                
                <% if (productIsAvailable) { %>
                    <form id="addToCartForm">
                        <input type="hidden" name="productId" value="<%= product._id %>"/>
                        <input type="hidden" name="variantId" id="selectedVariantId" value="<%= (firstAvailable || product.variants[0])._id %>"/>
                        <input type="hidden" name="quantity" value="1"/>
                        <button type="submit" class="w-full py-4 bg-gray-900 text-white rounded-lg font-semibold uppercase tracking-wide hover:bg-gray-800 transition text-lg" id="addToCartButton">
                            <i class="fa-solid fa-cart-plus mr-2"></i>Add to Cart
                        </button>
                    </form>
                <% } else if (!product.isListed) { %>
                    <div class="w-full py-4 bg-red-50 text-red-700 font-semibold rounded-lg text-center border border-red-200">
                        <i class="fa-solid fa-ban mr-2"></i>This product is no longer available
                    </div>
                <% } else { %>
                    <div class="w-full py-4 bg-red-50 text-red-700 font-semibold rounded-lg text-center border border-red-200">
                        <i class="fa-solid fa-times-circle mr-2"></i>ALL VARIANTS SOLD OUT
                    </div>
                <% } %>
            </div>

            <!-- DESCRIPTION -->
            <div class="pt-6 border-t border-gray-200">
                <h3 class="text-lg font-semibold mb-3 uppercase tracking-wide">Product Details</h3>
                <p class="text-gray-700 leading-relaxed whitespace-pre-line">
                    <%= product.description %>
                </p>
            </div>
        </div>
    </div>

    <!-- RELATED PRODUCTS -->
    <% if (relatedProducts && relatedProducts.length > 0) { %>
      <section>
        <h3 class="text-2xl font-bold mb-8">You May Also Like</h3>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
          <% relatedProducts.forEach(rp => { %>
            <a href="/user/products/<%= rp._id %>" class="group block">
              <div class="bg-gray-50 rounded-lg overflow-hidden transition hover:-translate-y-1 hover:shadow-lg">
                <div class="aspect-square overflow-hidden">
                  <img src="<%= getImageUrl(rp.images[0]) %>"
                       alt="<%= rp.productName %>"
                       class="w-full h-full object-contain group-hover:scale-105 transition duration-300" />
                </div>
                <div class="p-4">
                  <h4 class="font-semibold text-gray-900 truncate group-hover:text-gray-600 transition"><%= rp.productName %></h4>
                  <p class="text-sm text-gray-600 mt-1 uppercase tracking-wide"><%= rp.brand || 'Unknown Brand' %></p>
                  <p class="text-lg font-bold mt-2">
                    ₹<%= (rp.variants && rp.variants[0] && typeof rp.variants[0].regularPrice === 'number')
                          ? (rp.variants[0].salePrice && rp.variants[0].salePrice < rp.variants[0].regularPrice
                              ? rp.variants[0].salePrice.toFixed(2)
                              : rp.variants[0].regularPrice.toFixed(2))
                          : '0.00' %>
                  </p>
                </div>
              </div>
            </a>
          <% }) %>
        </div>
      </section>
    <% } %>
</main>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    // Toast notification function
    function showToast(type, message) {
        const toast = document.createElement('div');
        toast.className = 'fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full opacity-0';
        
        if (type === 'success') {
            toast.classList.add('bg-green-100', 'text-green-800', 'border', 'border-green-200');
        } else {
            toast.classList.add('bg-red-100', 'text-red-800', 'border', 'border-red-200');
        }
        
        toast.innerHTML = '<i class="fas fa-' + (type === 'success' ? 'check-circle' : 'exclamation-circle') + ' mr-2"></i><span>' + message + '</span>';

        document.body.appendChild(toast);

        setTimeout(function() {
            toast.classList.remove('translate-x-full', 'opacity-0');
            toast.classList.add('translate-x-0', 'opacity-100');
        }, 100);
        
        setTimeout(function() {
            toast.classList.add('translate-x-full', 'opacity-0');
            setTimeout(function() {
                toast.remove();
            }, 300);
        }, 3000);
    }

    // Loading state management
    function setButtonLoading(button, isLoading) {
        if (isLoading) {
            button.disabled = true;
            button.innerHTML = '<div class="inline-flex items-center"><svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Adding to Cart...</div>';
        } else {
            button.disabled = false;
            button.innerHTML = '<i class="fa-solid fa-cart-plus mr-2"></i>Add to Cart';
        }
    }

    // FIXED MAGNIFIER FUNCTION
    function magnify(imgID, zoom) {
        var img, glass, w, h, bw;
        img = document.getElementById(imgID);
        
        if (!img) return;

        // Remove existing magnifier glass
        var existingGlass = document.querySelector('.img-magnifier-glass');
        if (existingGlass) {
            existingGlass.remove();
        }

        // Create magnifier glass
        glass = document.createElement('div');
        glass.setAttribute('class', 'img-magnifier-glass');
        
        // Insert magnifier glass
        img.parentElement.insertBefore(glass, img);

        // Set background properties for the magnifier glass
        glass.style.backgroundImage = 'url("' + img.src + '")';
        glass.style.backgroundRepeat = 'no-repeat';
        glass.style.backgroundSize = (img.width * zoom) + 'px ' + (img.height * zoom) + 'px';
        
        bw = 3;
        w = glass.offsetWidth / 2;
        h = glass.offsetHeight / 2;

        // Execute a function when someone moves the magnifier glass over the image
        glass.addEventListener('mousemove', moveMagnifier);
        img.addEventListener('mousemove', moveMagnifier);
        glass.addEventListener('touchmove', moveMagnifier);
        img.addEventListener('touchmove', moveMagnifier);

        function moveMagnifier(e) {
            var pos, x, y;
            e.preventDefault();
            pos = getCursorPos(e);
            x = pos.x;
            y = pos.y;
            
            // Prevent the magnifier glass from being positioned outside the image
            if (x > img.width - (w / zoom)) { x = img.width - (w / zoom); }
            if (x < w / zoom) { x = w / zoom; }
            if (y > img.height - (h / zoom)) { y = img.height - (h / zoom); }
            if (y < h / zoom) { y = h / zoom; }
            
            // Set the position of the magnifier glass
            glass.style.left = (x - w) + 'px';
            glass.style.top = (y - h) + 'px';
            
            // Display what the magnifier glass "sees"
            glass.style.backgroundPosition = '-' + ((x * zoom) - w + bw) + 'px -' + ((y * zoom) - h + bw) + 'px';
        }

        function getCursorPos(e) {
            var a, x = 0, y = 0;
            e = e || window.event;
            a = img.getBoundingClientRect();
            x = e.pageX - a.left - window.pageXOffset;
            y = e.pageY - a.top - window.pageYOffset;
            return { x: x, y: y };
        }

        // Show magnifier on mouse enter, hide on mouse leave
        img.addEventListener('mouseenter', function() {
            glass.style.display = 'block';
        });
        
        img.addEventListener('mouseleave', function() {
            glass.style.display = 'none';
        });
        
        glass.addEventListener('mouseleave', function() {
            glass.style.display = 'none';
        });
    }

    // Change main image function
    function changeMainImage(thumbImg) {
        var mainImg = document.getElementById('mainProductImage');
        mainImg.src = thumbImg.src;
        setActiveThumb(thumbImg);
        
        // Re-initialize magnifier with new image
        setTimeout(function() {
            magnify('mainProductImage', 2.5);
        }, 100);
    }

    function setActiveThumb(img) {
        var thumbs = document.querySelectorAll('.thumb-active');
        thumbs.forEach(function(t) {
            t.classList.remove('thumb-active');
        });
        img.classList.add('thumb-active');
    }

    // Update add to cart button state
    function updateAddToCartButton() {
        var addToCartButton = document.getElementById('addToCartButton');
        var variantSelector = document.getElementById('variantSelector');
        
        if (!addToCartButton || !variantSelector) return;
        
        var selectedOption = variantSelector.options[variantSelector.selectedIndex];
        var stock = parseInt(selectedOption.getAttribute('data-stock'));
        
        if (stock > 0) {
            addToCartButton.disabled = false;
            addToCartButton.className = 'w-full py-4 bg-gray-900 text-white rounded-lg font-semibold uppercase tracking-wide hover:bg-gray-800 transition text-lg';
            addToCartButton.innerHTML = '<i class="fa-solid fa-cart-plus mr-2"></i>Add to Cart';
        } else {
            addToCartButton.disabled = true;
            addToCartButton.className = 'w-full py-4 bg-gray-400 text-white rounded-lg font-semibold uppercase tracking-wide cursor-not-allowed text-lg';
            addToCartButton.innerHTML = '<i class="fa-solid fa-times-circle mr-2"></i>Out of Stock';
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        var variantSelector = document.getElementById('variantSelector');
        var selectedVariantInput = document.getElementById('selectedVariantId');
        var wishlistBtn = document.getElementById('wishlistBtn');
        var wishlistIcon = document.getElementById('wishlistIcon');
        
        // Initialize magnifier
        setTimeout(function() {
            magnify('mainProductImage', 2.5);
        }, 500);
        
        // Initialize add to cart button state
        updateAddToCartButton();
        
        // Set first thumbnail as active
        var firstThumb = document.querySelector('.thumbnail-img');
        if (firstThumb) {
            setActiveThumb(firstThumb);
        }
        
        // Check initial wishlist status
        checkWishlistStatus();
        
        // Wishlist functionality
        if (wishlistBtn) {
            wishlistBtn.addEventListener('click', async function() {
                var variantId = selectedVariantInput ? selectedVariantInput.value : null;
                
                if (!variantId) {
                    showToast('error', 'Please select a size before adding to wishlist');
                    return;
                }
                
                try {
                    wishlistIcon.className = 'fas fa-spinner fa-spin text-2xl text-gray-400';
                    wishlistBtn.disabled = true;
                    
                    var isInWishlist = wishlistIcon.classList.contains('text-red-500');
                    
                    if (isInWishlist) {
                        var response = await fetch('/user/api/wishlist/' + variantId, {
                            method: 'DELETE',
                            credentials: 'include'
                        });
                        
                        var data = await response.json();
                        
                        if (data.success) {
                            if (window.headerUpdater) {
                     window.headerUpdater.triggerUpdate();
                  }
                            wishlistIcon.className = 'fas fa-heart text-2xl text-gray-400 hover:text-red-500 transition-colors duration-300';
                            showToast('success', 'Removed from wishlist');
                        } else {
                            throw new Error(data.error || 'Failed to remove from wishlist');
                        }
                    } else {
                        var response = await fetch('/user/api/wishlist/' + variantId, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            credentials: 'include'
                        });
                        
                        var data = await response.json();
                        
                        if (data.success) {
                            if (window.headerUpdater) {
                     window.headerUpdater.triggerUpdate();
                  }
                            wishlistIcon.className = 'fas fa-heart text-2xl text-red-500';
                            showToast('success', 'Added to wishlist');
                        } else {
                            throw new Error(data.error || 'Failed to add to wishlist');
                        }
                    }
                    
                } catch (error) {
                    console.error('Wishlist error:', error);
                    showToast('error', error.message || 'Failed to update wishlist');
                    var isInWishlist = wishlistIcon.classList.contains('text-red-500');
                    wishlistIcon.className = 'fas fa-heart text-2xl ' + (isInWishlist ? 'text-red-500' : 'text-gray-400 hover:text-red-500 transition-colors duration-300');
                } finally {
                    wishlistBtn.disabled = false;
                }
            });
        }
        
        // Check wishlist status
        async function checkWishlistStatus() {
            var variantId = selectedVariantInput ? selectedVariantInput.value : null;
            if (!variantId) return;
            
            try {
                var response = await fetch('/user/api/wishlist/' + variantId, {
                    credentials: 'include'
                });
                
                var data = await response.json();
                
                if (data.success && data.data.inWishlist) {
                    wishlistIcon.className = 'fas fa-heart text-2xl text-red-500';
                } else {
                    wishlistIcon.className = 'fas fa-heart text-2xl text-gray-400 hover:text-red-500 transition-colors duration-300';
                }
                
            } catch (error) {
                console.error('Check wishlist status error:', error);
            }
        }
        
        // Variant selector change handler
        if (variantSelector) {
            variantSelector.addEventListener('change', function() {
                var selectedOption = this.options[this.selectedIndex];
                var variantId = selectedOption.value;
                var stock = parseInt(selectedOption.getAttribute('data-stock'));
                var price = parseFloat(selectedOption.getAttribute('data-price'));
                var regularPrice = parseFloat(selectedOption.getAttribute('data-regular-price'));
                
                // Update hidden input
                selectedVariantInput.value = variantId;
                
                // Check wishlist status for new variant
                checkWishlistStatus();
                
                // Update pricing display
                var currentPrice = document.getElementById('currentPrice');
                var originalPrice = document.getElementById('originalPrice');
                var discountBadge = document.getElementById('discountBadge');
                
                currentPrice.textContent = '₹' + price.toFixed(2);
                
                // Update discount display
                if (price < regularPrice) {
                    if (!originalPrice) {
                        var priceContainer = currentPrice.parentElement;
                        
                        var originalPriceSpan = document.createElement('span');
                        originalPriceSpan.id = 'originalPrice';
                        originalPriceSpan.className = 'line-through text-gray-400 text-xl ml-2';
                        originalPriceSpan.textContent = '₹' + regularPrice.toFixed(2);
                        
                        var discountSpan = document.createElement('span');
                        discountSpan.id = 'discountBadge';
                        discountSpan.className = 'bg-red-100 text-red-700 px-3 py-1 rounded-full text-sm font-semibold ml-2';
                        discountSpan.textContent = Math.round((1 - price/regularPrice)*100) + '% OFF';
                        
                        priceContainer.appendChild(originalPriceSpan);
                        priceContainer.appendChild(discountSpan);
                    } else {
                        originalPrice.textContent = '₹' + regularPrice.toFixed(2);
                        discountBadge.textContent = Math.round((1 - price/regularPrice)*100) + '% OFF';
                    }
                } else {
                    if (originalPrice) originalPrice.remove();
                    if (discountBadge) discountBadge.remove();
                }
                
                // Update stock status
                var stockStatus = document.getElementById('stockStatus');
                if (stockStatus) {
                    stockStatus.innerHTML = stock > 0
                        ? '<i class="fas fa-check-circle"></i> In stock: ' + stock + ' units'
                        : '<i class="fas fa-times-circle"></i> Out of Stock';
                    stockStatus.className = stock > 0 
                        ? 'flex items-center gap-2 text-green-700 font-semibold' 
                        : 'flex items-center gap-2 text-red-600 font-semibold';
                }

                // Update add to cart button
                updateAddToCartButton();
            });
        }
        
        // Add to cart form handler
        var addToCartForm = document.getElementById('addToCartForm');
        if (addToCartForm) {
            addToCartForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                var submitButton = this.querySelector('button[type="submit"]');
                var errorMessage = document.getElementById('errorMessage');
                var errorText = document.getElementById('errorText');
                
                if (errorMessage) {
                    errorMessage.classList.add('hidden');
                }
                
                var variantId = document.getElementById('selectedVariantId').value;
                var quantity = parseInt(this.querySelector('input[name="quantity"]').value) || 1;
                
                if (!variantId) {
                    if (errorMessage && errorText) {
                        errorText.textContent = 'Please select a size before adding to cart';
                        errorMessage.classList.remove('hidden');
                    }
                    return;
                }
                
                setButtonLoading(submitButton, true);
                
                try {
                    var response = await fetch('/user/api/cart', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        credentials: 'include',
                        body: JSON.stringify({
                            variantId: variantId,
                            quantity: quantity
                        })
                    });
                    
                    var data = await response.json();
                    
                    if (data.success) {
                        showToast('success', data.data.message || 'Product added to cart successfully!');
                        
                       // Update cart counters
                        // var cartCount = document.getElementById('cartCount');
                        // if (cartCount) {
                        //     var currentCount = parseInt(cartCount.textContent) || 0;
                        //     cartCount.textContent = currentCount + quantity;
                        // }
                        
                        // var cartBadge = document.querySelector('.cart-badge');
                        // if (cartBadge) {
                        //     var currentCount = parseInt(cartBadge.textContent) || 0;
                        //     cartBadge.te                        xtContent = currentCount + quantity;
                        //     cartBadge.classList.remove('hidden');
                        // }
                          if (window.headerUpdater) {
                     window.headerUpdater.triggerUpdate();
                  }
                    } else {
                        throw new Error(data.error || 'Failed to add item to cart');
                    }
                    
                } catch (error) {
                    console.error('Add to cart error:', error);
                    
                    var errorMsg = 'Failed to add item to cart';
                    if (error.message) {
                        errorMsg = error.message;
                    }
                    
                    showToast('error', errorMsg);
                    
                    if (errorMessage && errorText) {
                        errorText.textContent = errorMsg;
                        errorMessage.classList.remove('hidden');
                    }
                } finally {
                    setButtonLoading(submitButton, false);
                }
            });
        }
    });
</script>

<!-- Required CSS -->
<style>
.img-magnifier-glass {
    position: absolute;
    border: 3px solid #000;
    border-radius: 50%;
    cursor: none;
    width: 100px;
    height: 100px;
    display: none;
    pointer-events: none;
    z-index: 1000;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
    background-color: white;
}

.img-magnifier-container {
    position: relative;
}

.thumb-active {
    border-color: #374151 !important;
    box-shadow: 0 0 0 2px rgba(55, 65, 81, 0.3);
}

.wishlist-btn {
    border: 1px solid transparent;
}

.wishlist-btn:hover {
    border-color: #e5e7eb;
}

.thumbnail-img {
    transition: all 0.2s ease;
}

.thumbnail-img:hover {
    transform: scale(1.05);
}
</style>
</body>
</html>
