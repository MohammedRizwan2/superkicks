<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>OTP Verification | Superkicks</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"/>
</head>
<body class="min-h-screen flex items-center justify-center bg-white">
  <div class="flex w-full max-w-5xl shadow-lg rounded-xl overflow-hidden border border-gray-200">

    <div class="w-1/2 bg-white flex flex-col items-center justify-center p-8">
      <h1 class="text-4xl font-extrabold mb-6 text-black tracking-wide">SUPERKICKS</h1>
      <img src="/img/shoe-removebg-preview.png"alt="Sneaker" class="w-80 h-auto object-contain" />
    </div>

    <div class="w-1/2 bg-gray-100 p-10 flex flex-col justify-center">
      <h2 class="text-2xl font-bold mb-2 text-center">OTP Verification</h2>
      <p class="text-sm text-gray-600 text-center mb-4">
        Enter OTP sent to <span class="font-medium"><%= email %></span>
      </p>

      <div class="text-center text-sm mb-4">
        OTP expires in: <span id="otpTimer" class="font-bold text-red-600">05:00</span>
      </div>

      <form id="otpForm" method="post" action="/user/verify-otp" class="flex flex-col items-center space-y-6">
        <input type="hidden" name="email" value="<%= email %>" />
        <div class="flex justify-center gap-2 mb-4" id="otpContainer">
          <% for (let i = 0; i < 6; i++) { %>
            <input
              type="text"
              name="otp[]"
              id="otp-<%= i %>"
              maxlength="1"
              class="w-12 h-12 text-center border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
              data-index="<%= i %>"
            />
          <% } %>
        </div>
        <button
          type="submit"
          class="bg-blue-600 text-white px-10 py-2 rounded-full hover:bg-blue-700 transition"
        >
          Confirm
        </button>
      </form>

      <form method="POST" action="/user/resend-otp" id="resendForm" class="mt-4 text-center">
        <input type="hidden" name="email" value="<%= email %>" />
        <button type="submit" id="resendBtn" class="text-blue-600 hover:underline disabled:text-gray-400 disabled:cursor-not-allowed">
          <span id="countdownText">Resend OTP</span>
          <span id="countdown"></span>
        </button>
      </form>

      <% if (isError && message) { %>
        <p class="text-red-600 text-center mb-2"><%= message %></p>
      <% } else if (!isError && message) { %>
        <p class="text-green-600 text-center mb-2"><%= message %></p>
      <% } %>
    </div>
  </div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  const otpInputs = document.querySelectorAll('input[name="otp[]"]');
  const countdownElement = document.getElementById('countdown');
  const resendForm = document.getElementById('resendForm');
  const otpTimerElement = document.getElementById('otpTimer'); // NEW: OTP Timer element

  let cooldownTimer;
  let otpExpiryTimer; // NEW: OTP Expiration Timer variable
  const OTP_EXPIRY_DURATION_SECONDS = 300; // 5 minutes

  // --- OTP Input Handling (Unchanged) ---
  otpInputs.forEach((input, index) => {
    // Normal typing behavior
    input.addEventListener("input", (e) => {
      e.target.value = e.target.value.replace(/[^0-9]/g, ''); // Only numbers

      if (e.target.value.length === 1 && index < otpInputs.length - 1) {
        otpInputs[index + 1].focus();
      }
    });

    // Backspace moves focus to the previous input
    input.addEventListener("keydown", (e) => {
      if (e.key === "Backspace" && !e.target.value && index > 0) {
        otpInputs[index - 1].focus();
      }
    });

    // Handle paste event
    input.addEventListener("paste", (e) => {
      e.preventDefault();
      const pasteData = (e.clipboardData || window.clipboardData).getData("text").replace(/\D/g, "");
      
      if (pasteData) {
        otpInputs.forEach((box, i) => {
          box.value = pasteData[i] || "";
        });

        const lastFilledIndex = Math.min(pasteData.length, otpInputs.length) - 1;
        if (lastFilledIndex >= 0) otpInputs[lastFilledIndex].focus();
      }
    });
  });

  // Second loop cleanup (removes duplicate listeners from the original code)
  otpInputs.forEach((input, index) => {
      input.addEventListener('input', (e) => {
        if (e.target.value.length === 1 && index < otpInputs.length - 1) {
          otpInputs[index + 1].focus();
        }
        e.target.value = e.target.value.replace(/[^0-9]/g, ''); 
      });
      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && !e.target.value && index > 0) {
          otpInputs[index - 1].focus();
        }
      })
  });
  
  // --- RESEND COOLDOWN LOGIC (Adjusted to use modern timer functions) ---

  function startResendCooldown(seconds) {
    const endTime = Date.now() + seconds * 1000;
    localStorage.setItem('resendCooldownEnd', endTime);

    updateResendTimer();
    // Clear previous timer and set new one
    if (cooldownTimer) clearInterval(cooldownTimer);
    cooldownTimer = setInterval(updateResendTimer, 1000);
  }

  function updateResendTimer() {
    const endTime = parseInt(localStorage.getItem('resendCooldownEnd'), 10);
    const remaining = Math.floor((endTime - Date.now()) / 1000);
    const resendBtn = document.getElementById('resendBtn');

    if (remaining > 0) {
      const m = String(Math.floor(remaining / 60)).padStart(2, '0');
      const s = String(remaining % 60).padStart(2, '0');
      countdownElement.textContent = ` (${m}:${s})`;
      resendBtn.disabled = true;
      resendBtn.classList.remove('hover:underline', 'text-blue-600');
      resendBtn.classList.add('disabled:text-gray-400');
    } else {
      clearInterval(cooldownTimer);
      countdownElement.textContent = '';
      resendBtn.disabled = false;
      resendBtn.classList.add('hover:underline', 'text-blue-600');
      resendBtn.classList.remove('disabled:text-gray-400');
      localStorage.removeItem('resendCooldownEnd');
    }
  }

  // --- NEW: OTP EXPIRATION TIMER LOGIC ---

  function startOTPExpirationTimer() {
    // 1. Get the current expiry time or set a new one if none exists
    let expiryEnd = localStorage.getItem('otpExpiryEnd');
    if (!expiryEnd) {
      // Set 5 minutes from now if the timer is being started fresh (e.g., first visit)
      expiryEnd = Date.now() + OTP_EXPIRY_DURATION_SECONDS * 1000;
      localStorage.setItem('otpExpiryEnd', expiryEnd);
    } else {
      expiryEnd = parseInt(expiryEnd, 10);
    }
    
    // 2. Start the timer interval
    updateOTPExpirationTimer(expiryEnd);
    if (otpExpiryTimer) clearInterval(otpExpiryTimer);
    otpExpiryTimer = setInterval(() => updateOTPExpirationTimer(expiryEnd), 1000);
  }

  function updateOTPExpirationTimer(endTime) {
    const remaining = Math.floor((endTime - Date.now()) / 1000);

    if (remaining > 0) {
      const m = String(Math.floor(remaining / 60)).padStart(2, '0');
      const s = String(remaining % 60).padStart(2, '0');
      otpTimerElement.textContent = `${m}:${s}`;
    } else {
      clearInterval(otpExpiryTimer);
      otpTimerElement.textContent = `00:00`;
      
      // Notify the user via SweetAlert that the OTP is invalid
      Swal.fire({
          icon: 'error',
          title: 'OTP Expired',
          text: 'The current One-Time Password has expired. Please resend a new one.',
          showConfirmButton: true
      });
      
      // Disable the confirmation button
      document.querySelector('#otpForm button[type="submit"]').disabled = true;
      localStorage.removeItem('otpExpiryEnd');
    }
  }

  // --- INITIALIZATION ON PAGE LOAD ---

  document.addEventListener('DOMContentLoaded', () => {
    // Check and run Resend Cooldown Timer
    const resendEndTime = parseInt(localStorage.getItem('resendCooldownEnd'), 10);
    if (resendEndTime && resendEndTime > Date.now()) {
      startResendCooldown(Math.floor((resendEndTime - Date.now()) / 1000));
    } else {
      // Ensure button is active if no cooldown is stored
      document.getElementById('resendBtn').disabled = false;
    }
    
    // Start the main 5-minute OTP Expiration Timer
    startOTPExpirationTimer();
  });

  // --- RESEND FORM SUBMISSION (Updated to restart both timers) ---

  resendForm.addEventListener('submit', function (event) {
    const endTime = parseInt(localStorage.getItem('resendCooldownEnd'), 10);
    if (endTime && endTime > Date.now()) {
      event.preventDefault();
      return; 
    }

    event.preventDefault();
    Swal.fire({
      icon: 'success',
      title: 'OTP Resent!',
      text: 'Please check your email for the new OTP.',
      timer: 1500,
      showConfirmButton: false
    }).then(() => {
      // 1. Restart the main 5-minute OTP Expiration Timer
      localStorage.removeItem('otpExpiryEnd'); // Clear old timer
      startOTPExpirationTimer(); // Start new 5-minute timer
      document.querySelector('#otpForm button[type="submit"]').disabled = false; // Re-enable submit button
      
      // 2. Start the 60-second Resend Cooldown
      startResendCooldown(60); 
      
      // 3. Submit the form to the server to send the new email
      HTMLFormElement.prototype.submit.call(resendForm);
    });
  });
</script>
</body>
</html>