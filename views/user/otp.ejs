<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>OTP Verification | Superkicks</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen flex items-center justify-center bg-white">
  <div class="flex w-full max-w-5xl shadow-lg rounded-xl overflow-hidden border border-gray-200">

    <!-- Left side -->
    <div class="w-1/2 bg-white flex flex-col items-center justify-center p-8">
      <h1 class="text-4xl font-extrabold mb-6 text-black tracking-wide">SUPERKICKS</h1>
      <img src="/img/shoe-removebg-preview.png"alt="Sneaker" class="w-80 h-auto object-contain" />
    </div>

    <!-- Right side -->
    <div class="w-1/2 bg-gray-100 p-10 flex flex-col justify-center">
      <h2 class="text-2xl font-bold mb-2 text-center">OTP Verification</h2>
      <p class="text-sm text-gray-600 text-center mb-4">
        Enter OTP sent to <span class="font-medium"><%= email %></span>
      </p>

      <form id="otpForm" method="post" action="/user/verify-otp" class="flex flex-col items-center space-y-6">
        <input type="hidden" name="email" value="<%= email %>" />
        <div class="flex justify-center gap-2 mb-4" id="otpContainer">
          <% for (let i = 0; i < 6; i++) { %>
            <input
              type="text"
              name="otp[]"
              id="otp-<%= i %>"
              maxlength="1"
              class="w-12 h-12 text-center border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
              data-index="<%= i %>"
            />
          <% } %>
        </div>
        <button
          type="submit"
          class="bg-blue-600 text-white px-10 py-2 rounded-full hover:bg-blue-700 transition"
        >
          Confirm
        </button>
      </form>

      <form method="POST" action="/user/resend-otp" id="resendForm" class="mt-4 text-center">
        <input type="hidden" name="email" value="<%= email %>" />
        <button type="submit" id="resendBtn" class="text-blue-600 hover:underline disabled:text-gray-400 disabled:cursor-not-allowed">
          <span id="countdownText">Resend OTP</span>
          <span id="countdown"></span>
        </button>
      </form>

      <!-- Display error or success messages -->
      <% if (isError && message) { %>
        <p class="text-red-600 text-center mb-2"><%= message %></p>
      <% } else if (!isError && message) { %>
        <p class="text-green-600 text-center mb-2"><%= message %></p>
      <% } %>
    </div>
  </div>

  <script>
    // OTP Input Handling with paste support
    const otpInputs = document.querySelectorAll('input[name="otp[]"]');
    const otpContainer = document.getElementById('otpContainer');
    
    // Handle individual input
    otpInputs.forEach((input, index) => {
      input.addEventListener('input', (e) => {
        if (e.target.value.length === 1 && index < otpInputs.length - 1) {
          otpInputs[index + 1].focus();
        }
        e.target.value = e.target.value.replace(/[^0-9]/g, '');
      });
      
      input.addEventListener('keydown', (e) => {
        if (e.key === 'Backspace' && !e.target.value && index > 0) {
          otpInputs[index - 1].focus();
        }
      });
    });
    
    // Handle paste event
    otpContainer.addEventListener('paste', (e) => {
      e.preventDefault();
      const pasteData = e.clipboardData.getData('text/plain').replace(/[^0-9]/g, '');
      
      // Fill OTP inputs with pasted data
      for (let i = 0; i < Math.min(pasteData.length, otpInputs.length); i++) {
        otpInputs[i].value = pasteData[i];
      }
      
      // Focus on the last filled input
      const lastFilledIndex = Math.min(pasteData.length - 1, otpInputs.length - 1);
      otpInputs[lastFilledIndex].focus();
    });

    // 1-minute cooldown timer for resend OTP
    let cooldownTime = 60; // 1 minute in seconds
    const countdownElement = document.getElementById('countdown');
    const resendBtn = document.getElementById('resendBtn');
    let cooldownInterval;

    function startCooldown() {
      resendBtn.disabled = true;
      let remaining = cooldownTime;
      
      cooldownInterval = setInterval(() => {
        const minutes = Math.floor(remaining / 60);
        const seconds = remaining % 60;
        
        countdownElement.textContent = ` (${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')})`;
        
        if (remaining <= 0) {
          clearInterval(cooldownInterval);
          resendBtn.disabled = false;
          countdownElement.textContent = '';
        } else {
          remaining--;
        }
      }, 1000);
    }

    // Start cooldown on page load
    startCooldown();

    // Reset cooldown when resend is clicked
    resendBtn.addEventListener('click', () => {
      startCooldown();
    });
  </script>
</body>
</html>