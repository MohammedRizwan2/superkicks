<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Order Details — Superkicks</title>
  
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            ash: '#f8f8f8',
            graphite: '#e5e5e5'
          },
          animation: {
            'fade-in': 'fade-in 0.6s ease-out',
          },
          keyframes: {
            'fade-in': {
              '0%': { opacity: '0', transform: 'translateY(10px)' },
              '100%': { opacity: '1', transform: 'translateY(0)' }
            }
          }
        }
      }
    }
  </script>
  
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    html, body { font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; }
    .focus-ring:focus { outline: 2px solid #000; outline-offset: 2px; }
    @media print {
      .no-print { display: none !important; }
    }
  </style>
</head>

<body class="min-h-full bg-white text-black">
  <%- include('../partials/header') %>

  <!-- Loading Overlay -->
  <div id="loading-overlay" class="hidden fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 shadow-xl">
      <div class="flex items-center gap-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-black"></div>
        <span>Processing...</span>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <main class="mx-auto w-full max-w-6xl px-4 sm:px-6 lg:px-8 py-8">
    
    <!-- Header -->
    <div class="mb-8 animate-fade-in">
      <div class="flex items-center justify-between mb-4">
        <div>
          <h1 class="text-2xl md:text-3xl font-bold tracking-tight">Order Details</h1>
          <nav class="mt-2 text-sm text-black/60">
            <a href="/user/orders" class="hover:text-black">My Orders</a>
            <span class="mx-2">&gt;</span>
            <span class="text-black font-semibold">Order #<%= order.referenceNo %></span>
          </nav>
        </div>
        
        <!-- Action Buttons -->
        <div class="flex gap-3 no-print">
          <button id="download-invoice" 
                  class="flex items-center gap-2 px-4 py-2 bg-black text-white rounded-lg font-medium hover:bg-black/90 transition focus-ring">
            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Download Invoice
          </button>

          <!-- Cancel Entire Order Button -->
          <% if (['Pending', 'Confirmed'].includes(order.status) && !order.isCancelled) { %>
            <button id="cancel-entire-order" 
                    class="flex items-center gap-2 px-4 py-2 border border-red-300 text-red-700 rounded-lg font-medium hover:bg-red-50 transition">
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
              Cancel Order
            </button>
          <% } %>

          <!-- Return Order Button -->
          <% if (order.status === 'Delivered' && !order.isReturned) { %>
            <button id="return-order" 
                    class="flex items-center gap-2 px-4 py-2 border border-orange-300 text-orange-700 rounded-lg font-medium hover:bg-orange-50 transition">
              <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
              </svg>
              Return Order
            </button>
          <% } %>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      
      <!-- Order Information -->
      <div class="lg:col-span-2 space-y-6">
        
        <!-- Order Summary Card -->
        <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in">
          <h2 class="text-lg font-semibold mb-4">Order Summary</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-black/60">Order Number:</span>
                <span class="font-mono font-semibold"><%= order.referenceNo %></span>
              </div>
              <div class="flex justify-between">
                <span class="text-black/60">Order Date:</span>
                <span class="font-medium"><%= new Date(order.orderDate).toLocaleDateString('en-IN', { 
                  year: 'numeric', month: 'long', day: 'numeric' 
                }) %></span>
              </div>
              <div class="flex justify-between">
                <span class="text-black/60">Payment Method:</span>
                <span class="font-medium"><%= order.paymentMethod === 'COD' ? 'Cash on Delivery' : order.paymentMethod %></span>
              </div>
            </div>
            
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-black/60">Order Status:</span>
                <div class="flex items-center gap-2">
                  <span class="inline-flex px-3 py-1 text-sm font-semibold rounded-full 
                             <%= order.status === 'Delivered' ? 'bg-green-100 text-green-800' : 
                                 order.status === 'Shipped' ? 'bg-blue-100 text-blue-800' : 
                                 order.status === 'Cancelled' ? 'bg-red-100 text-red-800' : 
                                 order.status === 'Return Requested' ? 'bg-orange-100 text-orange-800' :
                                 'bg-yellow-100 text-yellow-800' %>">
                    <%= order.status %>
                  </span>
                  <% if (order.isCancelled) { %>
                    <span class="text-xs bg-red-100 text-red-700 px-2 py-1 rounded-full">CANCELLED</span>
                  <% } %>
                  <% if (order.isReturned) { %>
                    <span class="text-xs bg-orange-100 text-orange-700 px-2 py-1 rounded-full">RETURN REQUESTED</span>
                  <% } %>
                </div>
              </div>
              <div class="flex justify-between">
                <span class="text-black/60">Total Amount:</span>
                <span class="text-xl font-bold">₹<%= order.total.toLocaleString('en-IN') %></span>
              </div>
              <div class="flex justify-between">
                <span class="text-black/60">Estimated Delivery:</span>
                <span class="font-medium">
                  <% if (order.status === 'Delivered') { %>
                    Delivered
                  <% } else { %>
                    <%= new Date(Date.now() + 5*24*60*60*1000).toLocaleDateString('en-IN') %>
                  <% } %>
                </span>
              </div>
            </div>
          </div>

          <!-- Cancellation/Return Reason Display -->
          <% if (order.cancellationReason) { %>
            <div class="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
              <h4 class="text-sm font-semibold text-red-800 mb-1">Cancellation Reason:</h4>
              <p class="text-sm text-red-700"><%= order.cancellationReason %></p>
            </div>
          <% } %>

          <% if (order.returnReason) { %>
            <div class="mt-4 p-3 bg-orange-50 border border-orange-200 rounded-lg">
              <h4 class="text-sm font-semibold text-orange-800 mb-1">Return Reason:</h4>
              <p class="text-sm text-orange-700"><%= order.returnReason %></p>
              <p class="text-xs text-orange-600 mt-1">Requested on: <%= new Date(order.returnRequestDate).toLocaleDateString('en-IN') %></p>
            </div>
          <% } %>
        </div>

        <!-- Shipping Address -->
        <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in">
          <h2 class="text-lg font-semibold mb-4">Shipping Address</h2>
          <div class="text-black/80 space-y-1">
            <p class="font-semibold"><%= order.address.name %></p>
            <p><%= order.address.address %></p>
            <% if (order.address.landmark) { %>
              <p>Near <%= order.address.landmark %></p>
            <% } %>
            <p><%= order.address.state %>, <%= order.address.country %> - <%= order.address.pinCode %></p>
            <p class="flex items-center gap-1">
              <svg class="h-4 w-4 text-black/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
              </svg>
              <%= order.address.phone %>
            </p>
            <p class="flex items-center gap-1">
              <svg class="h-4 w-4 text-black/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
              <%= order.address.email %>
            </p>
          </div>
        </div>

        <!-- Order Items with Individual Cancel Options -->
        <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in">
          <h2 class="text-lg font-semibold mb-4">Order Items</h2>
          
          <div class="space-y-4">
            <% order.items.forEach(item => { %>
              <div class="flex flex-col sm:flex-row gap-4 p-4 bg-white/60 rounded-lg border border-black/5 <%= item.isCancelled ? 'opacity-60' : '' %>">
                
                <!-- Product Image -->
                <div class="flex-shrink-0">
                  <img src="<%= item.image %>" 
                       alt="<%= item.productName %>" 
                       class="w-20 h-20 object-cover rounded border border-black/10 <%= item.isCancelled ? 'grayscale' : '' %>"
                       onerror="this.src='/images/placeholder.png'">
                </div>

                <!-- Product Details -->
                <div class="flex-1 min-w-0">
                  <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                    <div>
                      <h3 class="font-semibold text-black truncate">
                        <%= item.productName %>
                        <% if (item.isCancelled) { %>
                          <span class="text-xs text-red-600 ml-2">(CANCELLED)</span>
                        <% } %>
                      </h3>
                      <p class="text-sm text-black/60">Size: <%= item.size %></p>
                      <div class="flex items-center gap-2 mt-1">
                        <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full 
                                   <%= item.status === 'Delivered' ? 'bg-green-100 text-green-800' : 
                                       item.status === 'Shipped' ? 'bg-blue-100 text-blue-800' : 
                                       item.status === 'Cancelled' ? 'bg-red-100 text-red-800' : 
                                       item.status === 'Return Requested' ? 'bg-orange-100 text-orange-800' :
                                       'bg-yellow-100 text-yellow-800' %>">
                          <%= item.status %>
                        </span>
                      </div>

                      <!-- Individual Item Cancellation Reason -->
                      <% if (item.cancellationReason) { %>
                        <div class="mt-2 p-2 bg-red-50 border border-red-200 rounded text-xs">
                          <span class="font-medium text-red-800">Cancellation reason:</span>
                          <span class="text-red-700"><%= item.cancellationReason %></span>
                        </div>
                      <% } %>
                    </div>
                    
                    <!-- Pricing and Actions -->
                    <div class="flex items-center gap-4">
                      <div class="text-right">
                        <div class="text-sm text-black/60">
                          ₹<%= item.price.toLocaleString('en-IN') %> × <%= item.quantity %>
                        </div>
                        <div class="text-lg font-bold">
                          ₹<%= item.itemTotal.toLocaleString('en-IN') %>
                        </div>
                      </div>

                      <!-- Individual Cancel Button -->
                      <% if (['Pending', 'Confirmed'].includes(item.status) && !item.isCancelled) { %>
                        <button onclick="cancelItem('<%= order.id %>', '<%= item.id %>')"
                                class="px-3 py-2 border border-red-300 text-red-700 rounded-lg text-xs font-medium hover:bg-red-50 transition">
                          Cancel Item
                        </button>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>
            <% }) %>
          </div>
        </div>
      </div>

      <!-- Order Summary Sidebar -->
      <div class="lg:col-span-1">
        <div class="sticky top-6 bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in">
          <h2 class="text-lg font-semibold mb-4">Payment Summary</h2>
          
          <div class="space-y-3 text-sm">
            <div class="flex justify-between">
              <span class="text-black/70">Items Subtotal</span>
              <span class="font-medium">₹<%= totals.subtotal.toLocaleString('en-IN') %></span>
            </div>
            
            <div class="flex justify-between">
              <span class="text-black/70">Shipping</span>
              <span class="font-medium">
                <% if (totals.deliveryCharge === 0) { %>
                  <span class="text-green-600">FREE</span>
                <% } else { %>
                  ₹<%= totals.deliveryCharge.toLocaleString('en-IN') %>
                <% } %>
              </span>
            </div>
            
            <div class="flex justify-between">
              <span class="text-black/70">Tax (18%)</span>
              <span class="font-medium">₹<%= totals.tax.toLocaleString('en-IN') %></span>
            </div>
            
            <div class="border-t border-black/10 pt-3">
              <div class="flex justify-between text-base font-semibold">
                <span>Total Paid</span>
                <span class="text-lg">₹<%= order.total.toLocaleString('en-IN') %></span>
              </div>
            </div>
          </div>

          <!-- Order Actions -->
          <div class="mt-6 space-y-3 no-print">
            <a href="/user/orders" 
               class="block w-full py-2 px-4 border border-black/20 text-black rounded-lg font-medium hover:bg-black/5 transition text-center text-sm">
              Back to Orders
            </a>
            
            <a href="/user/product/list" 
               class="block w-full py-2 px-4 bg-black text-white rounded-lg font-medium hover:bg-black/90 transition text-center text-sm">
              Continue Shopping
            </a>
          </div>

          <!-- Support -->
          <div class="mt-6 pt-4 border-t border-black/10 no-print">
            <h3 class="text-sm font-semibold mb-2">Need Help?</h3>
            <div class="space-y-2 text-xs text-black/60">
              <a href="/contact" class="flex items-center gap-2 hover:text-black transition">
                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
                Contact Support
              </a>
              <a href="tel:+919876543210" class="flex items-center gap-2 hover:text-black transition">
                <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
                Call Us
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Cancel Order Modal -->
  <div id="cancel-modal" class="hidden fixed inset-0 z-50 overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4 bg-black/20 backdrop-blur-sm">
      <div class="bg-white rounded-xl shadow-2xl max-w-md w-full">
        <div class="p-6">
          <h3 class="text-lg font-semibold mb-4" id="cancel-modal-title">Cancel Order</h3>
          <p class="text-black/70 mb-4" id="cancel-modal-text">Are you sure you want to cancel this order? This action cannot be undone.</p>
          
          <div class="mb-4">
            <label class="block text-sm font-medium mb-2">Reason (Optional)</label>
            <textarea id="cancel-reason" 
                      placeholder="Please provide a reason for cancellation..."
                      rows="3"
                      class="w-full p-3 border border-black/20 rounded-lg focus:outline-none focus:border-black/40 resize-none"></textarea>
          </div>

          <div class="flex gap-3">
            <button id="cancel-modal-close"
                    class="flex-1 py-3 border border-black/20 rounded-lg hover:bg-black/5 transition">
              Cancel
            </button>
            <button id="confirm-cancel"
                    class="flex-1 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
              Confirm Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Return Order Modal -->
  <div id="return-modal" class="hidden fixed inset-0 z-50 overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4 bg-black/20 backdrop-blur-sm">
      <div class="bg-white rounded-xl shadow-2xl max-w-md w-full">
        <div class="p-6">
          <h3 class="text-lg font-semibold mb-4">Request Return</h3>
          <p class="text-black/70 mb-4">Please provide a reason for the return request. Our team will review and process your request.</p>
          
          <div class="mb-4">
            <label class="block text-sm font-medium mb-2">Return Reason *</label>
            <textarea id="return-reason" 
                      placeholder="Please describe why you want to return this order (minimum 10 characters)..."
                      rows="4"
                      class="w-full p-3 border border-black/20 rounded-lg focus:outline-none focus:border-black/40 resize-none"
                      required></textarea>
            <div class="text-xs text-red-600 hidden" id="return-reason-error">Return reason is required (minimum 10 characters)</div>
          </div>

          <div class="flex gap-3">
            <button id="return-modal-close"
                    class="flex-1 py-3 border border-black/20 rounded-lg hover:bg-black/5 transition">
              Cancel
            </button>
            <button id="confirm-return"
                    class="flex-1 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition">
              Submit Request
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Enhanced Order Details JavaScript -->
  <script>
    class OrderDetailsManager {
      constructor() {
        this.orderId = '<%= order.id %>';
        this.loadingOverlay = document.getElementById('loading-overlay');
        this.cancelModal = document.getElementById('cancel-modal');
        this.returnModal = document.getElementById('return-modal');
        this.currentAction = null;
        this.currentItemId = null;
        this.init();
      }

      init() {
        this.bindEvents();
      }

      bindEvents() {
        // Download invoice
        const downloadBtn = document.getElementById('download-invoice');
        if (downloadBtn) {
          downloadBtn.addEventListener('click', () => this.downloadInvoice());
        }

        // Cancel entire order
        const cancelOrderBtn = document.getElementById('cancel-entire-order');
        if (cancelOrderBtn) {
          cancelOrderBtn.addEventListener('click', () => this.showCancelModal('order'));
        }

        // Return order
        const returnOrderBtn = document.getElementById('return-order');
        if (returnOrderBtn) {
          returnOrderBtn.addEventListener('click', () => this.showReturnModal());
        }

        // Modal controls
        document.getElementById('cancel-modal-close')?.addEventListener('click', () => this.closeCancelModal());
        document.getElementById('return-modal-close')?.addEventListener('click', () => this.closeReturnModal());
        document.getElementById('confirm-cancel')?.addEventListener('click', () => this.confirmCancel());
        document.getElementById('confirm-return')?.addEventListener('click', () => this.confirmReturn());

        // Close modals on outside click
        this.cancelModal?.addEventListener('click', (e) => {
          if (e.target === this.cancelModal) this.closeCancelModal();
        });
        this.returnModal?.addEventListener('click', (e) => {
          if (e.target === this.returnModal) this.closeReturnModal();
        });
      }

      showLoading() {
        this.loadingOverlay.classList.remove('hidden');
      }

      hideLoading() {
        this.loadingOverlay.classList.add('hidden');
      }

      showCancelModal(type, itemId = null) {
        this.currentAction = type;
        this.currentItemId = itemId;
        
        const title = document.getElementById('cancel-modal-title');
        const text = document.getElementById('cancel-modal-text');
        
        if (type === 'item') {
          title.textContent = 'Cancel Item';
          text.textContent = 'Are you sure you want to cancel this item? This action cannot be undone.';
        } else {
          title.textContent = 'Cancel Order';
          text.textContent = 'Are you sure you want to cancel this entire order? This action cannot be undone.';
        }
        
        this.cancelModal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }

      closeCancelModal() {
        this.cancelModal.classList.add('hidden');
        document.body.style.overflow = '';
        document.getElementById('cancel-reason').value = '';
        this.currentAction = null;
        this.currentItemId = null;
      }

      showReturnModal() {
        this.returnModal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }

      closeReturnModal() {
        this.returnModal.classList.add('hidden');
        document.body.style.overflow = '';
        document.getElementById('return-reason').value = '';
        document.getElementById('return-reason-error').classList.add('hidden');
      }

      async confirmCancel() {
        try {
          this.showLoading();
          
          const reason = document.getElementById('cancel-reason').value.trim();
          let url, method;
          
          if (this.currentAction === 'item') {
            url = `/user/api/orders/${this.orderId}/items/${this.currentItemId}/cancel`;
            method = 'PUT';
          } else {
            url = `/user/api/orders/${this.orderId}/cancel`;
            method = 'PUT';
          }
          
          const response = await fetch(url, {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ reason })
          });
          
          const result = await response.json();
          
          if (result.success) {
            this.showToast('success', result.message);
            this.closeCancelModal();
            // Reload page to show updated status
            setTimeout(() => window.location.reload(), 1000);
          } else {
            this.showToast('error', result.error);
          }
          
        } catch (error) {
          console.error('Cancel error:', error);
          this.showToast('error', 'Failed to cancel. Please try again.');
        } finally {
          this.hideLoading();
        }
      }

      async confirmReturn() {
        const reasonInput = document.getElementById('return-reason');
        const errorElement = document.getElementById('return-reason-error');
        const reason = reasonInput.value.trim();
        
        if (reason.length < 10) {
          errorElement.classList.remove('hidden');
          reasonInput.focus();
          return;
        }
        
        errorElement.classList.add('hidden');
        
        try {
          this.showLoading();
          
          const response = await fetch(`/user/api/orders/${this.orderId}/returns`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ reason })
          });
          
          const result = await response.json();
          
          if (result.success) {
            this.showToast('success', result.message);
            this.closeReturnModal();
            // Reload page to show updated status
            setTimeout(() => window.location.reload(), 1000);
          } else {
            this.showToast('error', result.error);
          }
          
        } catch (error) {
          console.error('Return error:', error);
          this.showToast('error', 'Failed to submit return request. Please try again.');
        } finally {
          this.hideLoading();
        }
      }

      async downloadInvoice() {
        try {
          this.showLoading();
          
          const response = await fetch(`/user/orders/${this.orderId}/invoice`, {
            method: 'GET',
            credentials: 'include'
          });

          if (!response.ok) {
            throw new Error('Failed to generate invoice');
          }

          const filename = `invoice-<%= order.referenceNo %>.pdf`;
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = filename;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
          
          this.showToast('success', 'Invoice downloaded successfully!');
          
        } catch (error) {
          console.error('Download error:', error);
          this.showToast('error', 'Failed to download invoice. Please try again.');
        } finally {
          this.hideLoading();
        }
      }

      showToast(type, message) {
        const toast = document.createElement('div');
        toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full opacity-0`;
        
        if (type === 'success') {
          toast.classList.add('bg-green-100', 'text-green-800', 'border', 'border-green-200');
        } else {
          toast.classList.add('bg-red-100', 'text-red-800', 'border', 'border-red-200');
        }
        
        toast.innerHTML = `
          <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
          <span>${message}</span>
        `;

        document.body.appendChild(toast);

        setTimeout(() => {
          toast.classList.remove('translate-x-full', 'opacity-0');
          toast.classList.add('translate-x-0', 'opacity-100');
        }, 100);
        
        setTimeout(() => {
          toast.classList.add('translate-x-full', 'opacity-0');
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }
    }

    // Global function for individual item cancellation
    function cancelItem(orderId, itemId) {
      orderDetailsManager.showCancelModal('item', itemId);
    }

    // Initialize order details manager
    const orderDetailsManager = new OrderDetailsManager();
  </script>
</body>
</html>
