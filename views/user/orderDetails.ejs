<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Order Details â€” Superkicks</title>
  
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            ash: '#f8f8f8',
            graphite: '#e5e5e5'
          },
          animation: {
            'fade-in': 'fade-in 0.6s ease-out',
          },
          keyframes: {
            'fade-in': {
              '0%': { opacity: '0', transform: 'translateY(10px)' },
              '100%': { opacity: '1', transform: 'translateY(0)' }
            }
          }
        }
      }
    }
  </script>
  
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    html, body { font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; }
    .focus-ring:focus { outline: 2px solid #000; outline-offset: 2px; }
    @media print {
      .no-print { display: none !important; }
    }
  </style>
</head>

<body class="min-h-full bg-white text-black">
  <%- include('../partials/header') %>

  <!-- Hidden data container -->
  <div id="order-data-container" 
       style="display: none;" 
       data-order="<%- encodeURIComponent(JSON.stringify(order)) %>"
       data-totals="<%- encodeURIComponent(JSON.stringify(totals)) %>"
       data-discounts="<%- encodeURIComponent(JSON.stringify(discounts)) %>"
       data-user="<%- encodeURIComponent(JSON.stringify(user)) %>">
  </div>

  <!-- Loading Overlay -->
  <div id="loading-overlay" class="hidden fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 shadow-xl">
      <div class="flex items-center gap-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-black"></div>
        <span>Processing...</span>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <main class="mx-auto w-full max-w-6xl px-4 sm:px-6 lg:px-8 py-8">
    
    <!-- Header -->
    <div class="mb-8 animate-fade-in">
      <div class="flex items-center justify-between mb-4">
        <div>
          <h1 class="text-2xl md:text-3xl font-bold tracking-tight">Order Details</h1>
          <nav class="mt-2 text-sm text-black/60">
            <a href="/user/orders" class="hover:text-black">My Orders</a>
            <span class="mx-2">&gt;</span>
            <span class="text-black font-semibold">Order #<span id="order-reference-no"></span></span>
          </nav>
        </div>
        
        <!-- Action Buttons -->
        <div class="flex gap-3 no-print">
          <button id="download-invoice" 
                  class="flex items-center gap-2 px-4 py-2 bg-black text-white rounded-lg font-medium hover:bg-black/90 transition focus-ring">
            <i class="fas fa-download"></i>
            Download Invoice
          </button>

          <!-- Cancel Entire Order Button -->
          <button id="cancel-entire-order" 
                  class="hidden flex items-center gap-2 px-4 py-2 border border-red-300 text-red-700 rounded-lg font-medium hover:bg-red-50 transition">
            <i class="fas fa-times"></i>
            Cancel Order
          </button>

          <!-- Return Order Button -->
          <button id="return-order" 
                  class="hidden flex items-center gap-2 px-4 py-2 border border-orange-300 text-orange-700 rounded-lg font-medium hover:bg-orange-50 transition">
            <i class="fas fa-undo"></i>
            Return Order
          </button>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      
      <!-- Order Information -->
      <div class="lg:col-span-2 space-y-6">
        
        <!-- Order Summary Card -->
        <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in">
          <h2 class="text-lg font-semibold mb-4">Order Summary</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-black/60">Order Number:</span>
                <span class="font-mono font-semibold" id="order-ref-display"></span>
              </div>
              <div class="flex justify-between">
                <span class="text-black/60">Order Date:</span>
                <span class="font-medium" id="order-date-display"></span>
              </div>
              <div class="flex justify-between">
                <span class="text-black/60">Payment Method:</span>
                <span class="font-medium" id="payment-method-display"></span>
              </div>
            </div>
            
            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-black/60">Order Status:</span>
                <div class="flex items-center gap-2">
                  <span id="order-status-badge" class="inline-flex px-3 py-1 text-sm font-semibold rounded-full"></span>
                </div>
              </div>
              <div class="flex justify-between">
                <span class="text-black/60">Total Amount:</span>
                <span class="text-xl font-bold" id="total-amount-display"></span>
              </div>
              <div class="flex justify-between">
                <span class="text-black/60">Estimated Delivery:</span>
                <span class="font-medium" id="delivery-estimate">
                  Processing...
                </span>
              </div>
            </div>
          </div>

          <!-- Status Messages -->
          <div id="status-messages" class="mt-4">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>

        <!-- Shipping Address -->
        <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in">
          <h2 class="text-lg font-semibold mb-4">Shipping Address</h2>
          <div class="text-black/80 space-y-1" id="shipping-address">
            <!-- Address will be populated by JavaScript -->
          </div>
        </div>

        <!-- Order Items -->
        <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in">
          <h2 class="text-lg font-semibold mb-4">Order Items</h2>
          <div class="space-y-4" id="order-items-container">
            <!-- Items will be populated by JavaScript -->
          </div>
        </div>
      </div>

      <!-- Order Summary Sidebar -->
      <div class="lg:col-span-1">
        <div class="sticky top-6 space-y-6">
          
          <!-- Enhanced Payment Summary with Discounts -->
          <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in">
            <h2 class="text-lg font-semibold mb-4">Payment Summary</h2>
            <div class="space-y-3 text-sm" id="payment-summary-details">
              <!-- Payment details will be populated by JavaScript -->
            </div>
          </div>

          <!-- Discount Breakdown -->
          <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in">
            <h2 class="text-lg font-semibold mb-4">Savings & Discounts</h2>
            <div class="space-y-3 text-sm" id="discount-breakdown">
              <!-- Discount details will be populated by JavaScript -->
            </div>
          </div>

          <!-- Order Actions -->
          <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in no-print">
            <h2 class="text-lg font-semibold mb-4">Actions</h2>
            
            <div class="space-y-3">
              <a href="/user/orders" 
                 class="block w-full py-2 px-4 border border-black/20 text-black rounded-lg font-medium hover:bg-black/5 transition text-center text-sm">
                <i class="fas fa-arrow-left mr-1"></i> Back to Orders
              </a>
              
              <a href="/user/product/list" 
                 class="block w-full py-2 px-4 bg-black text-white rounded-lg font-medium hover:bg-black/90 transition text-center text-sm">
                Continue Shopping
              </a>
            </div>
          </div>

          <!-- Support -->
          <div class="bg-ash/40 rounded-xl border border-black/10 p-6 animate-fade-in no-print">
            <h2 class="text-lg font-semibold mb-4">Need Help?</h2>
            <div class="space-y-2 text-xs text-black/60">
              <a href="/contact" class="flex items-center gap-2 hover:text-black transition">
                <i class="fas fa-comments"></i>
                Contact Support
              </a>
              <a href="tel:+919876543210" class="flex items-center gap-2 hover:text-black transition">
                <i class="fas fa-phone"></i>
                Call Us
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Cancel Order Modal -->
  <div id="cancel-modal" class="hidden fixed inset-0 z-50 overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4 bg-black/20 backdrop-blur-sm">
      <div class="bg-white rounded-xl shadow-2xl max-w-md w-full">
        <div class="p-6">
          <h3 class="text-lg font-semibold mb-4" id="cancel-modal-title">Cancel Order</h3>
          <p class="text-black/70 mb-4" id="cancel-modal-text">Are you sure you want to cancel this order? This action cannot be undone.</p>
          
          <div class="mb-4">
            <label class="block text-sm font-medium mb-2">Reason (Optional)</label>
            <textarea id="cancel-reason" 
                      placeholder="Please provide a reason for cancellation..."
                      rows="3"
                      class="w-full p-3 border border-black/20 rounded-lg focus:outline-none focus:border-black/40 resize-none"></textarea>
          </div>

          <div class="flex gap-3">
            <button id="cancel-modal-close"
                    class="flex-1 py-3 border border-black/20 rounded-lg hover:bg-black/5 transition">
              Cancel
            </button>
            <button id="confirm-cancel"
                    class="flex-1 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
              Confirm Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Return Order Modal -->
  <div id="return-modal" class="hidden fixed inset-0 z-50 overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4 bg-black/20 backdrop-blur-sm">
      <div class="bg-white rounded-xl shadow-2xl max-w-md w-full">
        <div class="p-6">
          <h3 class="text-lg font-semibold mb-4">Request Return</h3>
          <p class="text-black/70 mb-4">Please provide a reason for the return request. Our team will review and process your request.</p>
          
          <div class="mb-4">
            <label class="block text-sm font-medium mb-2">Return Reason *</label>
            <textarea id="return-reason" 
                      placeholder="Please describe why you want to return this order (minimum 10 characters)..."
                      rows="4"
                      class="w-full p-3 border border-black/20 rounded-lg focus:outline-none focus:border-black/40 resize-none"
                      required></textarea>
            <div class="text-xs text-red-600 hidden" id="return-reason-error">Return reason is required (minimum 10 characters)</div>
          </div>

          <div class="flex gap-3">
            <button id="return-modal-close"
                    class="flex-1 py-3 border border-black/20 rounded-lg hover:bg-black/5 transition">
              Cancel
            </button>
            <button id="confirm-return"
                    class="flex-1 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition">
              Submit Request
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Individual Item Return Modal -->
  <div id="item-return-modal" class="hidden fixed inset-0 z-50 overflow-y-auto">
    <div class="flex min-h-screen items-center justify-center p-4 bg-black/20 backdrop-blur-sm">
      <div class="bg-white rounded-xl shadow-2xl max-w-md w-full">
        <div class="p-6">
          <h3 class="text-lg font-semibold mb-4">Return Item</h3>
          <p class="text-black/70 mb-2">Item: <span id="item-return-name" class="font-medium"></span></p>
          <p class="text-black/70 mb-4">Please provide a reason for returning this specific item.</p>
          
          <div class="mb-4">
            <label class="block text-sm font-medium mb-2">Return Reason *</label>
            <textarea id="item-return-reason" 
                      placeholder="Please describe why you want to return this item (minimum 10 characters)..."
                      rows="4"
                      class="w-full p-3 border border-black/20 rounded-lg focus:outline-none focus:border-black/40 resize-none"
                      required></textarea>
            <div class="text-xs text-red-600 hidden" id="item-return-reason-error">Return reason is required (minimum 10 characters)</div>
          </div>

          <div class="flex gap-3">
            <button id="item-return-modal-close"
                    class="flex-1 py-3 border border-black/20 rounded-lg hover:bg-black/5 transition">
              Cancel
            </button>
            <button id="confirm-item-return"
                    class="flex-1 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition">
              Submit Request
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- JavaScript -->
  <script>
    class UserOrderDetailsManager {
      constructor() {
        this.data = this.getDataFromContainer();
        this.loadingOverlay = document.getElementById('loading-overlay');
        this.cancelModal = document.getElementById('cancel-modal');
        this.returnModal = document.getElementById('return-modal');
        this.itemReturnModal = document.getElementById('item-return-modal');
        this.currentItemId = null;
        
        this.init();
      }

      getDataFromContainer() {
        try {
          const container = document.getElementById('order-data-container');
          if (!container) {
            throw new Error('Order data container not found');
          }
          
          return {
            order: JSON.parse(decodeURIComponent(container.dataset.order || '{}')),
            totals: JSON.parse(decodeURIComponent(container.dataset.totals || '{}')),
            discounts: JSON.parse(decodeURIComponent(container.dataset.discounts || '{}')),
            user: JSON.parse(decodeURIComponent(container.dataset.user || '{}'))
          };
        } catch (error) {
          console.error('Failed to parse order data:', error);
          return {
            order: {},
            totals: {},
            discounts: {},
            user: {}
          };
        }
      }

      init() {
        this.renderOrderInfo();
        this.renderShippingAddress();
        this.renderOrderItems();
        this.renderPaymentSummary();
        this.renderDiscountBreakdown();
        this.bindEvents();
        this.updateActionButtons();
      }

      formatINR(amount) {
        return new Intl.NumberFormat('en-IN', { maximumFractionDigits: 0 }).format(amount);
      }

      formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('en-IN', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
      }

      getStatusClass(status) {
        switch(status?.toLowerCase()) {
          case 'delivered':
            return 'bg-green-100 text-green-800';
          case 'shipped':
          case 'out for delivery':
            return 'bg-blue-100 text-blue-800';
          case 'cancelled':
            return 'bg-red-100 text-red-800';
          case 'confirmed':
          case 'processing':
            return 'bg-indigo-100 text-indigo-800';
          case 'pending':
            return 'bg-yellow-100 text-yellow-800';
          default:
            return 'bg-gray-100 text-gray-800';
        }
      }

      renderOrderInfo() {
        const { order } = this.data;
        
        document.getElementById('order-reference-no').textContent = order.referenceNo || '';
        document.getElementById('order-ref-display').textContent = '#' + (order.referenceNo || '');
        document.getElementById('order-date-display').textContent = this.formatDate(order.orderDate);
        
        const paymentMethod = order.paymentMethod === 'COD' ? 'Cash on Delivery' : 
                             order.paymentMethod === 'RAZORPAY' ? 'Online Payment' : order.paymentMethod;
        document.getElementById('payment-method-display').textContent = paymentMethod;
        
        document.getElementById('total-amount-display').textContent = `â‚¹${this.formatINR(order.total)}`;
        
        // Order status badge
        const statusBadge = document.getElementById('order-status-badge');
        statusBadge.textContent = order.status;
        statusBadge.className = `inline-flex px-3 py-1 text-sm font-semibold rounded-full ${this.getStatusClass(order.status)}`;
        
        // Delivery estimate
        const deliveryElement = document.getElementById('delivery-estimate');
        if (order.status === 'Delivered') {
          deliveryElement.textContent = 'Delivered';
        } else if (order.status === 'Cancelled') {
          deliveryElement.textContent = 'Cancelled';
        } else {
          const estimatedDate = new Date(Date.now() + 5*24*60*60*1000);
          deliveryElement.textContent = estimatedDate.toLocaleDateString('en-IN');
        }

        // Status messages
        this.renderStatusMessages();
      }

      renderStatusMessages() {
        const { order } = this.data;
        const container = document.getElementById('status-messages');
        let messagesHTML = '';

        if (order.cancellationReason) {
          messagesHTML += `
            <div class="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
              <h4 class="text-sm font-semibold text-red-800 mb-1">Cancellation Reason:</h4>
              <p class="text-sm text-red-700">${order.cancellationReason}</p>
            </div>
          `;
        }

        if (order.returnReason) {
          messagesHTML += `
            <div class="mt-4 p-3 bg-orange-50 border border-orange-200 rounded-lg">
              <h4 class="text-sm font-semibold text-orange-800 mb-1">Return Reason:</h4>
              <p class="text-sm text-orange-700">${order.returnReason}</p>
              ${order.returnRequestDate ? `<p class="text-xs text-orange-600 mt-1">Requested on: ${this.formatDate(order.returnRequestDate)}</p>` : ''}
            </div>
          `;
        }

        container.innerHTML = messagesHTML;
      }

      renderShippingAddress() {
        const { order } = this.data;
        const address = order.address;
        
        if (address) {
          document.getElementById('shipping-address').innerHTML = `
            <p class="font-semibold">${address.name}</p>
            <p>${address.address}</p>
            ${address.landmark ? `<p>Near ${address.landmark}</p>` : ''}
            <p>${address.state}, ${address.country} - ${address.pinCode}</p>
            <p class="flex items-center gap-1">
              <i class="fas fa-phone text-black/60"></i>
              ${address.phone}
            </p>
            <p class="flex items-center gap-1">
              <i class="fas fa-envelope text-black/60"></i>
              ${address.email}
            </p>
          `;
        }
      }

      renderOrderItems() {
        const { order, discounts } = this.data;
        const container = document.getElementById('order-items-container');
        
        if (!order.items || order.items.length === 0) {
          container.innerHTML = '<p class="text-gray-500">No items found</p>';
          return;
        }

        const itemsHTML = order.items.map(item => {
          const offerDiscount = item.offerDiscount || 0;
          const isAffected = item.isCancelled || item.isReturned;
          
          // Determine if item can be returned
          const canReturnItem = item.status === 'Delivered' && 
                               !item.isCancelled && 
                               !item.isReturned && 
                               !item.returnRequested;
          
          return `
            <div class="flex flex-col sm:flex-row gap-4 p-4 bg-white/60 rounded-lg border border-black/5 ${isAffected ? 'opacity-60' : ''}">
              <!-- Product Image -->
              <div class="flex-shrink-0">
                <img src="${item.image || '/images/placeholder.png'}" 
                     alt="${item.productName}" 
                     class="w-20 h-20 object-cover rounded border border-black/10 ${isAffected ? 'grayscale' : ''}"
                     onerror="this.src='/images/placeholder.png'">
              </div>

              <!-- Product Details -->
              <div class="flex-1 min-w-0">
                <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-2">
                  <div class="flex-1">
                    <h3 class="font-semibold text-black truncate">
                      ${item.productName}
                      ${item.returnRequested ? '<span class="text-xs text-orange-600 ml-2">(RETURN REQUESTED)</span>' : ''}
                      ${item.returnApproved === false ? '<span class="text-xs text-red-600 ml-2">(RETURN REJECTED)</span>' : ''}
                      ${item.returnApproved === true ? '<span class="text-xs text-green-600 ml-2">(RETURN APPROVED)</span>' : ''}
                    </h3>
                    <p class="text-sm text-black/60">Size: ${item.size}</p>
                    
                    <!-- Pricing Details -->
                    <div class="mt-2 space-y-1">
                      ${item.regularPrice && item.regularPrice > item.price ? `
                        <div class="text-xs text-black/50">
                          <span class="line-through">Regular: â‚¹${this.formatINR(item.regularPrice)}</span>
                        </div>
                      ` : ''}
                      <div class="text-sm font-medium">
                        Sale Price: â‚¹${this.formatINR(item.price)} Ã— ${item.quantity}
                      </div>
                      ${offerDiscount > 0 ? `
                        <div class="text-xs text-green-600 font-medium">
                          <i class="fas fa-tag mr-1"></i>Product Offer Saved: â‚¹${this.formatINR(offerDiscount)}
                        </div>
                      ` : ''}
                    </div>

                    <!-- Item Status -->
                    <div class="flex items-center gap-2 mt-2">
                      <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full ${this.getStatusClass(item.status)}">
                        ${item.status}
                      </span>
                    </div>

                    <!-- Item Actions - INDIVIDUAL RETURN REQUEST -->
                    ${canReturnItem ? `
                      <div class="mt-3 no-print">
                        <button onclick="window.userOrderDetailsManager.showItemReturnModal('${item.id}', '${item.productName}')"
                                class="inline-flex items-center gap-1 px-3 py-1 text-xs font-medium text-orange-700 bg-orange-50 border border-orange-200 rounded-lg hover:bg-orange-100 transition">
                          <i class="fas fa-undo"></i>
                          Return This Item
                        </button>
                      </div>
                    ` : ''}

                    <!-- Status Messages -->
                    ${item.cancellationReason ? `
                      <div class="mt-2 p-2 bg-red-50 border border-red-200 rounded text-xs">
                        <span class="font-medium text-red-800">Cancellation reason:</span>
                        <span class="text-red-700">${item.cancellationReason}</span>
                      </div>
                    ` : ''}
                    
                    ${item.returnRejectionReason ? `
                      <div class="mt-2 p-2 bg-red-50 border border-red-200 rounded text-xs">
                        <span class="font-medium text-red-800">Return rejection reason:</span>
                        <span class="text-red-700">${item.returnRejectionReason}</span>
                      </div>
                    ` : ''}

                    ${item.returnReason ? `
                      <div class="mt-2 p-2 bg-orange-50 border border-orange-200 rounded text-xs">
                        <span class="font-medium text-orange-800">Return reason:</span>
                        <span class="text-orange-700">${item.returnReason}</span>
                        ${item.returnRequestDate ? `<p class="text-xs text-orange-600 mt-1">Requested on: ${this.formatDate(item.returnRequestDate)}</p>` : ''}
                      </div>
                    ` : ''}

                    <!-- Return Request Status -->
                    ${item.returnRequested && !item.returnApproved && item.returnApproved !== false ? `
                      <div class="mt-2 p-2 bg-amber-50 border border-amber-200 rounded text-xs">
                        <div class="flex items-center gap-1 text-amber-800">
                          <i class="fas fa-clock"></i>
                          <span class="font-medium">Return request pending admin review</span>
                        </div>
                      </div>
                    ` : ''}

                    ${item.returnApproved === true ? `
                      <div class="mt-2 p-2 bg-green-50 border border-green-200 rounded text-xs">
                        <div class="flex items-center gap-1 text-green-800">
                          <i class="fas fa-check-circle"></i>
                          <span class="font-medium">Return approved - refund processed</span>
                        </div>
                      </div>
                    ` : ''}
                  </div>
                  
                  <!-- Pricing -->
                  <div class="text-right">
                    <div class="text-sm text-black/60">
                      â‚¹${this.formatINR(item.price)} Ã— ${item.quantity}
                    </div>
                    <div class="text-lg font-bold">
                      â‚¹${this.formatINR(item.itemTotal)}
                    </div>
                    ${offerDiscount > 0 ? `
                      <div class="text-xs text-green-600">
                        Saved: â‚¹${this.formatINR(offerDiscount)}
                      </div>
                    ` : ''}
                  </div>
                </div>
              </div>
            </div>
          `;
        }).join('');

        container.innerHTML = itemsHTML;
      }

      renderPaymentSummary() {
        const { totals, discounts, order } = this.data;
        const container = document.getElementById('payment-summary-details');
        
        let summaryHTML = '';

        // Original Subtotal (before discounts)
        if (discounts.totalOfferDiscount > 0) {
          summaryHTML += `
            <div class="flex justify-between">
              <span class="text-black/70">Original Subtotal</span>
              <span class="font-medium">â‚¹${this.formatINR(totals.subtotal + discounts.totalOfferDiscount)}</span>
            </div>
          `;
        }

        // Product Offer Discounts
        if (discounts.totalOfferDiscount > 0) {
          summaryHTML += `
            <div class="flex justify-between text-green-700">
              <span><i class="fas fa-tags mr-1"></i>Product Offers</span>
              <span>-â‚¹${this.formatINR(discounts.totalOfferDiscount)}</span>
            </div>
          `;
        }

        // Items Subtotal
        summaryHTML += `
          <div class="flex justify-between">
            <span class="text-black/70">Items Subtotal</span>
            <span class="font-medium">â‚¹${this.formatINR(totals.subtotal)}</span>
          </div>
        `;

        // Shipping
        summaryHTML += `
          <div class="flex justify-between">
            <span class="text-black/70">Shipping</span>
            <span class="font-medium">
              ${totals.deliveryCharge === 0 ? 
                '<span class="text-green-600">FREE</span>' : 
                `â‚¹${this.formatINR(totals.deliveryCharge)}`
              }
            </span>
          </div>
        `;

        // Tax
        summaryHTML += `
          <div class="flex justify-between">
            <span class="text-black/70">Tax (18%)</span>
            <span class="font-medium">â‚¹${this.formatINR(totals.tax)}</span>
          </div>
        `;

        // Coupon Discount
        if (order.coupon && order.coupon.discountAmount > 0) {
          summaryHTML += `
            <div class="flex justify-between text-blue-700">
              <span><i class="fas fa-ticket-alt mr-1"></i>Coupon (${order.coupon.code})</span>
              <span>-â‚¹${this.formatINR(order.coupon.discountAmount)}</span>
            </div>
          `;
        }

        summaryHTML += `
          <div class="border-t border-black/10 pt-3">
            <div class="flex justify-between text-base font-semibold">
              <span>Total Paid</span>
              <span class="text-lg">â‚¹${this.formatINR(totals.finalAmount || totals.total)}</span>
            </div>
          </div>
        `;

        container.innerHTML = summaryHTML;
      }

      renderDiscountBreakdown() {
        const { discounts, order } = this.data;
        const container = document.getElementById('discount-breakdown');
        
        let discountHTML = '';
        let hasSavings = false;

        // Product offer discounts
        if (discounts.totalOfferDiscount > 0) {
          discountHTML += `
            <div class="bg-green-50 border border-green-200 rounded p-3 mb-3">
              <div class="font-medium text-green-800 mb-2">
                <i class="fas fa-tags mr-1"></i>Product Offer Savings
              </div>
              <div class="text-green-700 text-xs">
                Save on individual products with current offers
              </div>
              <div class="text-lg font-bold text-green-800 mt-1">
                â‚¹${this.formatINR(discounts.totalOfferDiscount)}
              </div>
            </div>
          `;
          hasSavings = true;
        }

        // Coupon savings
        if (order.coupon && order.coupon.discountAmount > 0) {
          discountHTML += `
            <div class="bg-blue-50 border border-blue-200 rounded p-3 mb-3">
              <div class="font-medium text-blue-800 mb-2">
                <i class="fas fa-ticket-alt mr-1"></i>Coupon Savings
              </div>
              <div class="text-blue-700 text-xs mb-1">
                Code: <span class="font-mono font-semibold">${order.coupon.code}</span>
              </div>
              <div class="text-blue-700 text-xs">
                ${order.coupon.type === 'PERCENT' ? `${order.coupon.value}% discount` : `â‚¹${order.coupon.value} flat discount`}
              </div>
              <div class="text-lg font-bold text-blue-800 mt-1">
                â‚¹${this.formatINR(order.coupon.discountAmount)}
              </div>
            </div>
          `;
          hasSavings = true;
        }

        // Total savings
        if (discounts.totalSavings > 0) {
          discountHTML += `
            <div class="bg-yellow-50 border border-yellow-200 rounded p-3">
              <div class="flex justify-between items-center">
                <div class="font-semibold text-yellow-800">
                  <i class="fas fa-piggy-bank mr-1"></i>Total Savings
                </div>
                <div class="text-xl font-bold text-yellow-800">
                  â‚¹${this.formatINR(discounts.totalSavings)}
                </div>
              </div>
            </div>
          `;
        }

        if (!hasSavings) {
          discountHTML = `
            <div class="text-center py-4 text-black/60">
              <i class="fas fa-info-circle mb-2"></i>
              <p class="text-sm">No discounts applied to this order</p>
            </div>
          `;
        }

        container.innerHTML = discountHTML;
      }

      updateActionButtons() {
        const { order } = this.data;
        
        // Show/hide cancel button
        const cancelBtn = document.getElementById('cancel-entire-order');
        if (['Pending', 'Confirmed'].includes(order.status) && !order.isCancelled) {
          cancelBtn.classList.remove('hidden');
        }

        // Show/hide return button
        const returnBtn = document.getElementById('return-order');
        if (order.status === 'Delivered' && !order.isReturned && !order.isCancelled) {
          returnBtn.classList.remove('hidden');
        }
      }

      bindEvents() {
        // Download invoice
        const downloadBtn = document.getElementById('download-invoice');
        if (downloadBtn) {
          downloadBtn.addEventListener('click', () => this.downloadInvoice());
        }

        // Cancel order
        const cancelBtn = document.getElementById('cancel-entire-order');
        if (cancelBtn) {
          cancelBtn.addEventListener('click', () => this.showCancelModal());
        }

        // Return order
        const returnBtn = document.getElementById('return-order');
        if (returnBtn) {
          returnBtn.addEventListener('click', () => this.showReturnModal());
        }

        // Modal controls
        document.getElementById('cancel-modal-close')?.addEventListener('click', () => this.closeCancelModal());
        document.getElementById('return-modal-close')?.addEventListener('click', () => this.closeReturnModal());
        document.getElementById('confirm-cancel')?.addEventListener('click', () => this.confirmCancel());
        document.getElementById('confirm-return')?.addEventListener('click', () => this.confirmReturn());

        // Individual item return modal controls
        document.getElementById('item-return-modal-close')?.addEventListener('click', () => this.closeItemReturnModal());
        document.getElementById('confirm-item-return')?.addEventListener('click', () => this.confirmItemReturn());

        // Close modals on outside click
        this.cancelModal?.addEventListener('click', (e) => {
          if (e.target === this.cancelModal) this.closeCancelModal();
        });
        this.returnModal?.addEventListener('click', (e) => {
          if (e.target === this.returnModal) this.closeReturnModal();
        });
        this.itemReturnModal?.addEventListener('click', (e) => {
          if (e.target === this.itemReturnModal) this.closeItemReturnModal();
        });
      }

      showCancelModal() {
        this.cancelModal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }

      closeCancelModal() {
        this.cancelModal.classList.add('hidden');
        document.body.style.overflow = '';
        document.getElementById('cancel-reason').value = '';
      }

      showReturnModal() {
        this.returnModal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }

      closeReturnModal() {
        this.returnModal.classList.add('hidden');
        document.body.style.overflow = '';
        document.getElementById('return-reason').value = '';
        document.getElementById('return-reason-error').classList.add('hidden');
      }

      showItemReturnModal(itemId, itemName) {
        this.currentItemId = itemId;
        document.getElementById('item-return-name').textContent = itemName;
        this.itemReturnModal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }

      closeItemReturnModal() {
        this.itemReturnModal.classList.add('hidden');
        document.body.style.overflow = '';
        document.getElementById('item-return-reason').value = '';
        document.getElementById('item-return-reason-error').classList.add('hidden');
        this.currentItemId = null;
      }

      async confirmCancel() {
        try {
          this.showLoading();
          
          const reason = document.getElementById('cancel-reason').value.trim();
          
          const response = await fetch(`/user/api/orders/${this.data.order.id}/cancel`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ reason })
          });
          
          const result = await response.json();
          
          if (result.success) {
            this.showToast('success', result.message);
            this.closeCancelModal();
            setTimeout(() => window.location.reload(), 1000);
          } else {
            this.showToast('error', result.error);
          }
          
        } catch (error) {
          console.error('Cancel error:', error);
          this.showToast('error', 'Failed to cancel order');
        } finally {
          this.hideLoading();
        }
      }

      async confirmReturn() {
        const reasonInput = document.getElementById('return-reason');
        const errorElement = document.getElementById('return-reason-error');
        const reason = reasonInput.value.trim();
        
        if (reason.length < 10) {
          errorElement.classList.remove('hidden');
          reasonInput.focus();
          return;
        }
        
        errorElement.classList.add('hidden');
        
        try {
          this.showLoading();
          
          const response = await fetch(`/user/api/orders/${this.data.order.id}/returns`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ reason })
          });
          
          const result = await response.json();
          
          if (result.success) {
            this.showToast('success', result.message);
            this.closeReturnModal();
            setTimeout(() => window.location.reload(), 1000);
          } else {
            this.showToast('error', result.error);
          }
          
        } catch (error) {
          console.error('Return error:', error);
          this.showToast('error', 'Failed to submit return request');
        } finally {
          this.hideLoading();
        }
      }

      async confirmItemReturn() {
        const reasonInput = document.getElementById('item-return-reason');
        const errorElement = document.getElementById('item-return-reason-error');
        const reason = reasonInput.value.trim();
        
        if (reason.length < 10) {
          errorElement.classList.remove('hidden');
          reasonInput.focus();
          return;
        }
        
        errorElement.classList.add('hidden');
        
        try {
          this.showLoading();
          
          const response = await fetch(`/user/api/orders/${this.data.order.id}/items/${this.currentItemId}/return`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ reason })
          });
          
          const result = await response.json();
          
          if (result.success) {
            this.showToast('success', result.message);
            this.closeItemReturnModal();
            setTimeout(() => window.location.reload(), 1000);
          } else {
            this.showToast('error', result.error);
          }
          
        } catch (error) {
          console.error('Item return error:', error);
          this.showToast('error', 'Failed to submit item return request');
        } finally {
          this.hideLoading();
        }
      }

      async downloadInvoice() {
        try {
          this.showLoading();
          
          const response = await fetch(`/user/orders/${this.data.order.id}/invoice`, {
            method: 'GET',
            credentials: 'include'
          });

          if (!response.ok) {
            throw new Error('Failed to generate invoice');
          }

          const filename = `invoice-${this.data.order.referenceNo}.pdf`;
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = filename;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
          
          this.showToast('success', 'Invoice downloaded successfully!');
          
        } catch (error) {
          console.error('Download error:', error);
          this.showToast('error', 'Failed to download invoice');
        } finally {
          this.hideLoading();
        }
      }

      showLoading() {
        this.loadingOverlay.classList.remove('hidden');
      }

      hideLoading() {
        this.loadingOverlay.classList.add('hidden');
      }

      showToast(type, message) {
        const toast = document.createElement('div');
        toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full opacity-0`;
        
        if (type === 'success') {
          toast.classList.add('bg-green-100', 'text-green-800', 'border', 'border-green-200');
        } else {
          toast.classList.add('bg-red-100', 'text-red-800', 'border', 'border-red-200');
        }
        
        toast.innerHTML = `
          <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
          <span>${message}</span>
        `;

        document.body.appendChild(toast);

        setTimeout(() => {
          toast.classList.remove('translate-x-full', 'opacity-0');
          toast.classList.add('translate-x-0', 'opacity-100');
        }, 100);
        
        setTimeout(() => {
          toast.classList.add('translate-x-full', 'opacity-0');
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }
    }

    // Initialize order details manager
    document.addEventListener('DOMContentLoaded', function() {
      window.userOrderDetailsManager = new UserOrderDetailsManager();
    });
  </script>
</body>
</html>
